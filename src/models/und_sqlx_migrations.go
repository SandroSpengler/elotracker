// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SQLXMigration is an object representing the database table.
type SQLXMigration struct {
	Version       int64     `boil:"version" json:"version" toml:"version" yaml:"version"`
	Description   string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	InstalledOn   time.Time `boil:"installed_on" json:"installed_on" toml:"installed_on" yaml:"installed_on"`
	Success       bool      `boil:"success" json:"success" toml:"success" yaml:"success"`
	Checksum      []byte    `boil:"checksum" json:"checksum" toml:"checksum" yaml:"checksum"`
	ExecutionTime int64     `boil:"execution_time" json:"execution_time" toml:"execution_time" yaml:"execution_time"`

	R *sqlxMigrationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sqlxMigrationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SQLXMigrationColumns = struct {
	Version       string
	Description   string
	InstalledOn   string
	Success       string
	Checksum      string
	ExecutionTime string
}{
	Version:       "version",
	Description:   "description",
	InstalledOn:   "installed_on",
	Success:       "success",
	Checksum:      "checksum",
	ExecutionTime: "execution_time",
}

var SQLXMigrationTableColumns = struct {
	Version       string
	Description   string
	InstalledOn   string
	Success       string
	Checksum      string
	ExecutionTime string
}{
	Version:       "_sqlx_migrations.version",
	Description:   "_sqlx_migrations.description",
	InstalledOn:   "_sqlx_migrations.installed_on",
	Success:       "_sqlx_migrations.success",
	Checksum:      "_sqlx_migrations.checksum",
	ExecutionTime: "_sqlx_migrations.execution_time",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelper__byte struct{ field string }

func (w whereHelper__byte) EQ(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelper__byte) NEQ(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelper__byte) LT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelper__byte) LTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelper__byte) GT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelper__byte) GTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var SQLXMigrationWhere = struct {
	Version       whereHelperint64
	Description   whereHelperstring
	InstalledOn   whereHelpertime_Time
	Success       whereHelperbool
	Checksum      whereHelper__byte
	ExecutionTime whereHelperint64
}{
	Version:       whereHelperint64{field: "\"_sqlx_migrations\".\"version\""},
	Description:   whereHelperstring{field: "\"_sqlx_migrations\".\"description\""},
	InstalledOn:   whereHelpertime_Time{field: "\"_sqlx_migrations\".\"installed_on\""},
	Success:       whereHelperbool{field: "\"_sqlx_migrations\".\"success\""},
	Checksum:      whereHelper__byte{field: "\"_sqlx_migrations\".\"checksum\""},
	ExecutionTime: whereHelperint64{field: "\"_sqlx_migrations\".\"execution_time\""},
}

// SQLXMigrationRels is where relationship names are stored.
var SQLXMigrationRels = struct {
}{}

// sqlxMigrationR is where relationships are stored.
type sqlxMigrationR struct {
}

// NewStruct creates a new relationship struct
func (*sqlxMigrationR) NewStruct() *sqlxMigrationR {
	return &sqlxMigrationR{}
}

// sqlxMigrationL is where Load methods for each relationship are stored.
type sqlxMigrationL struct{}

var (
	sqlxMigrationAllColumns            = []string{"version", "description", "installed_on", "success", "checksum", "execution_time"}
	sqlxMigrationColumnsWithoutDefault = []string{"version", "description", "success", "checksum", "execution_time"}
	sqlxMigrationColumnsWithDefault    = []string{"installed_on"}
	sqlxMigrationPrimaryKeyColumns     = []string{"version"}
	sqlxMigrationGeneratedColumns      = []string{}
)

type (
	// SQLXMigrationSlice is an alias for a slice of pointers to SQLXMigration.
	// This should almost always be used instead of []SQLXMigration.
	SQLXMigrationSlice []*SQLXMigration
	// SQLXMigrationHook is the signature for custom SQLXMigration hook methods
	SQLXMigrationHook func(context.Context, boil.ContextExecutor, *SQLXMigration) error

	sqlxMigrationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sqlxMigrationType                 = reflect.TypeOf(&SQLXMigration{})
	sqlxMigrationMapping              = queries.MakeStructMapping(sqlxMigrationType)
	sqlxMigrationPrimaryKeyMapping, _ = queries.BindMapping(sqlxMigrationType, sqlxMigrationMapping, sqlxMigrationPrimaryKeyColumns)
	sqlxMigrationInsertCacheMut       sync.RWMutex
	sqlxMigrationInsertCache          = make(map[string]insertCache)
	sqlxMigrationUpdateCacheMut       sync.RWMutex
	sqlxMigrationUpdateCache          = make(map[string]updateCache)
	sqlxMigrationUpsertCacheMut       sync.RWMutex
	sqlxMigrationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sqlxMigrationAfterSelectMu sync.Mutex
var sqlxMigrationAfterSelectHooks []SQLXMigrationHook

var sqlxMigrationBeforeInsertMu sync.Mutex
var sqlxMigrationBeforeInsertHooks []SQLXMigrationHook
var sqlxMigrationAfterInsertMu sync.Mutex
var sqlxMigrationAfterInsertHooks []SQLXMigrationHook

var sqlxMigrationBeforeUpdateMu sync.Mutex
var sqlxMigrationBeforeUpdateHooks []SQLXMigrationHook
var sqlxMigrationAfterUpdateMu sync.Mutex
var sqlxMigrationAfterUpdateHooks []SQLXMigrationHook

var sqlxMigrationBeforeDeleteMu sync.Mutex
var sqlxMigrationBeforeDeleteHooks []SQLXMigrationHook
var sqlxMigrationAfterDeleteMu sync.Mutex
var sqlxMigrationAfterDeleteHooks []SQLXMigrationHook

var sqlxMigrationBeforeUpsertMu sync.Mutex
var sqlxMigrationBeforeUpsertHooks []SQLXMigrationHook
var sqlxMigrationAfterUpsertMu sync.Mutex
var sqlxMigrationAfterUpsertHooks []SQLXMigrationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SQLXMigration) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sqlxMigrationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SQLXMigration) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sqlxMigrationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SQLXMigration) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sqlxMigrationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SQLXMigration) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sqlxMigrationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SQLXMigration) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sqlxMigrationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SQLXMigration) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sqlxMigrationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SQLXMigration) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sqlxMigrationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SQLXMigration) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sqlxMigrationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SQLXMigration) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sqlxMigrationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSQLXMigrationHook registers your hook function for all future operations.
func AddSQLXMigrationHook(hookPoint boil.HookPoint, sqlxMigrationHook SQLXMigrationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sqlxMigrationAfterSelectMu.Lock()
		sqlxMigrationAfterSelectHooks = append(sqlxMigrationAfterSelectHooks, sqlxMigrationHook)
		sqlxMigrationAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		sqlxMigrationBeforeInsertMu.Lock()
		sqlxMigrationBeforeInsertHooks = append(sqlxMigrationBeforeInsertHooks, sqlxMigrationHook)
		sqlxMigrationBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		sqlxMigrationAfterInsertMu.Lock()
		sqlxMigrationAfterInsertHooks = append(sqlxMigrationAfterInsertHooks, sqlxMigrationHook)
		sqlxMigrationAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		sqlxMigrationBeforeUpdateMu.Lock()
		sqlxMigrationBeforeUpdateHooks = append(sqlxMigrationBeforeUpdateHooks, sqlxMigrationHook)
		sqlxMigrationBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		sqlxMigrationAfterUpdateMu.Lock()
		sqlxMigrationAfterUpdateHooks = append(sqlxMigrationAfterUpdateHooks, sqlxMigrationHook)
		sqlxMigrationAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		sqlxMigrationBeforeDeleteMu.Lock()
		sqlxMigrationBeforeDeleteHooks = append(sqlxMigrationBeforeDeleteHooks, sqlxMigrationHook)
		sqlxMigrationBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		sqlxMigrationAfterDeleteMu.Lock()
		sqlxMigrationAfterDeleteHooks = append(sqlxMigrationAfterDeleteHooks, sqlxMigrationHook)
		sqlxMigrationAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		sqlxMigrationBeforeUpsertMu.Lock()
		sqlxMigrationBeforeUpsertHooks = append(sqlxMigrationBeforeUpsertHooks, sqlxMigrationHook)
		sqlxMigrationBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		sqlxMigrationAfterUpsertMu.Lock()
		sqlxMigrationAfterUpsertHooks = append(sqlxMigrationAfterUpsertHooks, sqlxMigrationHook)
		sqlxMigrationAfterUpsertMu.Unlock()
	}
}

// One returns a single sqlxMigration record from the query.
func (q sqlxMigrationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SQLXMigration, error) {
	o := &SQLXMigration{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for _sqlx_migrations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SQLXMigration records from the query.
func (q sqlxMigrationQuery) All(ctx context.Context, exec boil.ContextExecutor) (SQLXMigrationSlice, error) {
	var o []*SQLXMigration

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SQLXMigration slice")
	}

	if len(sqlxMigrationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SQLXMigration records in the query.
func (q sqlxMigrationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count _sqlx_migrations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sqlxMigrationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if _sqlx_migrations exists")
	}

	return count > 0, nil
}

// SQLXMigrations retrieves all the records using an executor.
func SQLXMigrations(mods ...qm.QueryMod) sqlxMigrationQuery {
	mods = append(mods, qm.From("\"_sqlx_migrations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"_sqlx_migrations\".*"})
	}

	return sqlxMigrationQuery{q}
}

// FindSQLXMigration retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSQLXMigration(ctx context.Context, exec boil.ContextExecutor, version int64, selectCols ...string) (*SQLXMigration, error) {
	sqlxMigrationObj := &SQLXMigration{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"_sqlx_migrations\" where \"version\"=$1", sel,
	)

	q := queries.Raw(query, version)

	err := q.Bind(ctx, exec, sqlxMigrationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from _sqlx_migrations")
	}

	if err = sqlxMigrationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sqlxMigrationObj, err
	}

	return sqlxMigrationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SQLXMigration) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no _sqlx_migrations provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sqlxMigrationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sqlxMigrationInsertCacheMut.RLock()
	cache, cached := sqlxMigrationInsertCache[key]
	sqlxMigrationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sqlxMigrationAllColumns,
			sqlxMigrationColumnsWithDefault,
			sqlxMigrationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sqlxMigrationType, sqlxMigrationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sqlxMigrationType, sqlxMigrationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"_sqlx_migrations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"_sqlx_migrations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into _sqlx_migrations")
	}

	if !cached {
		sqlxMigrationInsertCacheMut.Lock()
		sqlxMigrationInsertCache[key] = cache
		sqlxMigrationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SQLXMigration.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SQLXMigration) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sqlxMigrationUpdateCacheMut.RLock()
	cache, cached := sqlxMigrationUpdateCache[key]
	sqlxMigrationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sqlxMigrationAllColumns,
			sqlxMigrationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update _sqlx_migrations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"_sqlx_migrations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, sqlxMigrationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sqlxMigrationType, sqlxMigrationMapping, append(wl, sqlxMigrationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update _sqlx_migrations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for _sqlx_migrations")
	}

	if !cached {
		sqlxMigrationUpdateCacheMut.Lock()
		sqlxMigrationUpdateCache[key] = cache
		sqlxMigrationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sqlxMigrationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for _sqlx_migrations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for _sqlx_migrations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SQLXMigrationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sqlxMigrationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"_sqlx_migrations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, sqlxMigrationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sqlxMigration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sqlxMigration")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SQLXMigration) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no _sqlx_migrations provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sqlxMigrationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sqlxMigrationUpsertCacheMut.RLock()
	cache, cached := sqlxMigrationUpsertCache[key]
	sqlxMigrationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			sqlxMigrationAllColumns,
			sqlxMigrationColumnsWithDefault,
			sqlxMigrationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			sqlxMigrationAllColumns,
			sqlxMigrationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert _sqlx_migrations, could not build update column list")
		}

		ret := strmangle.SetComplement(sqlxMigrationAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(sqlxMigrationPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert _sqlx_migrations, could not build conflict column list")
			}

			conflict = make([]string, len(sqlxMigrationPrimaryKeyColumns))
			copy(conflict, sqlxMigrationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"_sqlx_migrations\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(sqlxMigrationType, sqlxMigrationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sqlxMigrationType, sqlxMigrationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert _sqlx_migrations")
	}

	if !cached {
		sqlxMigrationUpsertCacheMut.Lock()
		sqlxMigrationUpsertCache[key] = cache
		sqlxMigrationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SQLXMigration record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SQLXMigration) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SQLXMigration provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sqlxMigrationPrimaryKeyMapping)
	sql := "DELETE FROM \"_sqlx_migrations\" WHERE \"version\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from _sqlx_migrations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for _sqlx_migrations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sqlxMigrationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sqlxMigrationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from _sqlx_migrations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for _sqlx_migrations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SQLXMigrationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sqlxMigrationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sqlxMigrationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"_sqlx_migrations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sqlxMigrationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sqlxMigration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for _sqlx_migrations")
	}

	if len(sqlxMigrationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SQLXMigration) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSQLXMigration(ctx, exec, o.Version)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SQLXMigrationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SQLXMigrationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sqlxMigrationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"_sqlx_migrations\".* FROM \"_sqlx_migrations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sqlxMigrationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SQLXMigrationSlice")
	}

	*o = slice

	return nil
}

// SQLXMigrationExists checks if the SQLXMigration row exists.
func SQLXMigrationExists(ctx context.Context, exec boil.ContextExecutor, version int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"_sqlx_migrations\" where \"version\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, version)
	}
	row := exec.QueryRowContext(ctx, sql, version)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if _sqlx_migrations exists")
	}

	return exists, nil
}

// Exists checks if the SQLXMigration row exists.
func (o *SQLXMigration) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SQLXMigrationExists(ctx, exec, o.Version)
}
