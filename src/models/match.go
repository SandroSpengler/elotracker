// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Match is an object representing the database table.
type Match struct {
	MatchID   string `boil:"match_id" json:"match_id" toml:"match_id" yaml:"match_id"`
	MatchData string `boil:"match_data" json:"match_data" toml:"match_data" yaml:"match_data"`

	R *matchR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L matchL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MatchColumns = struct {
	MatchID   string
	MatchData string
}{
	MatchID:   "match_id",
	MatchData: "match_data",
}

var MatchTableColumns = struct {
	MatchID   string
	MatchData string
}{
	MatchID:   "match.match_id",
	MatchData: "match.match_data",
}

// Generated where

var MatchWhere = struct {
	MatchID   whereHelperstring
	MatchData whereHelperstring
}{
	MatchID:   whereHelperstring{field: "\"match\".\"match_id\""},
	MatchData: whereHelperstring{field: "\"match\".\"match_data\""},
}

// MatchRels is where relationship names are stored.
var MatchRels = struct {
}{}

// matchR is where relationships are stored.
type matchR struct {
}

// NewStruct creates a new relationship struct
func (*matchR) NewStruct() *matchR {
	return &matchR{}
}

// matchL is where Load methods for each relationship are stored.
type matchL struct{}

var (
	matchAllColumns            = []string{"match_id", "match_data"}
	matchColumnsWithoutDefault = []string{"match_id", "match_data"}
	matchColumnsWithDefault    = []string{}
	matchPrimaryKeyColumns     = []string{"match_id"}
	matchGeneratedColumns      = []string{}
)

type (
	// MatchSlice is an alias for a slice of pointers to Match.
	// This should almost always be used instead of []Match.
	MatchSlice []*Match
	// MatchHook is the signature for custom Match hook methods
	MatchHook func(context.Context, boil.ContextExecutor, *Match) error

	matchQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	matchType                 = reflect.TypeOf(&Match{})
	matchMapping              = queries.MakeStructMapping(matchType)
	matchPrimaryKeyMapping, _ = queries.BindMapping(matchType, matchMapping, matchPrimaryKeyColumns)
	matchInsertCacheMut       sync.RWMutex
	matchInsertCache          = make(map[string]insertCache)
	matchUpdateCacheMut       sync.RWMutex
	matchUpdateCache          = make(map[string]updateCache)
	matchUpsertCacheMut       sync.RWMutex
	matchUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var matchAfterSelectMu sync.Mutex
var matchAfterSelectHooks []MatchHook

var matchBeforeInsertMu sync.Mutex
var matchBeforeInsertHooks []MatchHook
var matchAfterInsertMu sync.Mutex
var matchAfterInsertHooks []MatchHook

var matchBeforeUpdateMu sync.Mutex
var matchBeforeUpdateHooks []MatchHook
var matchAfterUpdateMu sync.Mutex
var matchAfterUpdateHooks []MatchHook

var matchBeforeDeleteMu sync.Mutex
var matchBeforeDeleteHooks []MatchHook
var matchAfterDeleteMu sync.Mutex
var matchAfterDeleteHooks []MatchHook

var matchBeforeUpsertMu sync.Mutex
var matchBeforeUpsertHooks []MatchHook
var matchAfterUpsertMu sync.Mutex
var matchAfterUpsertHooks []MatchHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Match) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Match) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Match) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Match) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Match) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Match) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Match) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Match) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Match) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMatchHook registers your hook function for all future operations.
func AddMatchHook(hookPoint boil.HookPoint, matchHook MatchHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		matchAfterSelectMu.Lock()
		matchAfterSelectHooks = append(matchAfterSelectHooks, matchHook)
		matchAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		matchBeforeInsertMu.Lock()
		matchBeforeInsertHooks = append(matchBeforeInsertHooks, matchHook)
		matchBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		matchAfterInsertMu.Lock()
		matchAfterInsertHooks = append(matchAfterInsertHooks, matchHook)
		matchAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		matchBeforeUpdateMu.Lock()
		matchBeforeUpdateHooks = append(matchBeforeUpdateHooks, matchHook)
		matchBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		matchAfterUpdateMu.Lock()
		matchAfterUpdateHooks = append(matchAfterUpdateHooks, matchHook)
		matchAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		matchBeforeDeleteMu.Lock()
		matchBeforeDeleteHooks = append(matchBeforeDeleteHooks, matchHook)
		matchBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		matchAfterDeleteMu.Lock()
		matchAfterDeleteHooks = append(matchAfterDeleteHooks, matchHook)
		matchAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		matchBeforeUpsertMu.Lock()
		matchBeforeUpsertHooks = append(matchBeforeUpsertHooks, matchHook)
		matchBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		matchAfterUpsertMu.Lock()
		matchAfterUpsertHooks = append(matchAfterUpsertHooks, matchHook)
		matchAfterUpsertMu.Unlock()
	}
}

// One returns a single match record from the query.
func (q matchQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Match, error) {
	o := &Match{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for match")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Match records from the query.
func (q matchQuery) All(ctx context.Context, exec boil.ContextExecutor) (MatchSlice, error) {
	var o []*Match

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Match slice")
	}

	if len(matchAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Match records in the query.
func (q matchQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count match rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q matchQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if match exists")
	}

	return count > 0, nil
}

// Matches retrieves all the records using an executor.
func Matches(mods ...qm.QueryMod) matchQuery {
	mods = append(mods, qm.From("\"match\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"match\".*"})
	}

	return matchQuery{q}
}

// FindMatch retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMatch(ctx context.Context, exec boil.ContextExecutor, matchID string, selectCols ...string) (*Match, error) {
	matchObj := &Match{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"match\" where \"match_id\"=$1", sel,
	)

	q := queries.Raw(query, matchID)

	err := q.Bind(ctx, exec, matchObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from match")
	}

	if err = matchObj.doAfterSelectHooks(ctx, exec); err != nil {
		return matchObj, err
	}

	return matchObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Match) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no match provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(matchColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	matchInsertCacheMut.RLock()
	cache, cached := matchInsertCache[key]
	matchInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			matchAllColumns,
			matchColumnsWithDefault,
			matchColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(matchType, matchMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(matchType, matchMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"match\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"match\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into match")
	}

	if !cached {
		matchInsertCacheMut.Lock()
		matchInsertCache[key] = cache
		matchInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Match.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Match) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	matchUpdateCacheMut.RLock()
	cache, cached := matchUpdateCache[key]
	matchUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			matchAllColumns,
			matchPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update match, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"match\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, matchPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(matchType, matchMapping, append(wl, matchPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update match row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for match")
	}

	if !cached {
		matchUpdateCacheMut.Lock()
		matchUpdateCache[key] = cache
		matchUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q matchQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for match")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for match")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MatchSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"match\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, matchPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in match slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all match")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Match) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no match provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(matchColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	matchUpsertCacheMut.RLock()
	cache, cached := matchUpsertCache[key]
	matchUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			matchAllColumns,
			matchColumnsWithDefault,
			matchColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			matchAllColumns,
			matchPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert match, could not build update column list")
		}

		ret := strmangle.SetComplement(matchAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(matchPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert match, could not build conflict column list")
			}

			conflict = make([]string, len(matchPrimaryKeyColumns))
			copy(conflict, matchPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"match\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(matchType, matchMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(matchType, matchMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert match")
	}

	if !cached {
		matchUpsertCacheMut.Lock()
		matchUpsertCache[key] = cache
		matchUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Match record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Match) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Match provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), matchPrimaryKeyMapping)
	sql := "DELETE FROM \"match\" WHERE \"match_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from match")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for match")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q matchQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no matchQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from match")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for match")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MatchSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(matchBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"match\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, matchPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from match slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for match")
	}

	if len(matchAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Match) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMatch(ctx, exec, o.MatchID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MatchSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MatchSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"match\".* FROM \"match\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, matchPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MatchSlice")
	}

	*o = slice

	return nil
}

// MatchExists checks if the Match row exists.
func MatchExists(ctx context.Context, exec boil.ContextExecutor, matchID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"match\" where \"match_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, matchID)
	}
	row := exec.QueryRowContext(ctx, sql, matchID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if match exists")
	}

	return exists, nil
}

// Exists checks if the Match row exists.
func (o *Match) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MatchExists(ctx, exec, o.MatchID)
}
