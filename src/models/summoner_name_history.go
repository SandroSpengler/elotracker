// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SummonerNameHistory is an object representing the database table.
type SummonerNameHistory struct {
	Puuid      string    `boil:"puuid" json:"puuid" toml:"puuid" yaml:"puuid"`
	GameName   string    `boil:"game_name" json:"game_name" toml:"game_name" yaml:"game_name"`
	TagLine    string    `boil:"tag_line" json:"tag_line" toml:"tag_line" yaml:"tag_line"`
	RenameDate time.Time `boil:"rename_date" json:"rename_date" toml:"rename_date" yaml:"rename_date"`

	R *summonerNameHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L summonerNameHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SummonerNameHistoryColumns = struct {
	Puuid      string
	GameName   string
	TagLine    string
	RenameDate string
}{
	Puuid:      "puuid",
	GameName:   "game_name",
	TagLine:    "tag_line",
	RenameDate: "rename_date",
}

var SummonerNameHistoryTableColumns = struct {
	Puuid      string
	GameName   string
	TagLine    string
	RenameDate string
}{
	Puuid:      "summoner_name_history.puuid",
	GameName:   "summoner_name_history.game_name",
	TagLine:    "summoner_name_history.tag_line",
	RenameDate: "summoner_name_history.rename_date",
}

// Generated where

var SummonerNameHistoryWhere = struct {
	Puuid      whereHelperstring
	GameName   whereHelperstring
	TagLine    whereHelperstring
	RenameDate whereHelpertime_Time
}{
	Puuid:      whereHelperstring{field: "\"summoner_name_history\".\"puuid\""},
	GameName:   whereHelperstring{field: "\"summoner_name_history\".\"game_name\""},
	TagLine:    whereHelperstring{field: "\"summoner_name_history\".\"tag_line\""},
	RenameDate: whereHelpertime_Time{field: "\"summoner_name_history\".\"rename_date\""},
}

// SummonerNameHistoryRels is where relationship names are stored.
var SummonerNameHistoryRels = struct {
}{}

// summonerNameHistoryR is where relationships are stored.
type summonerNameHistoryR struct {
}

// NewStruct creates a new relationship struct
func (*summonerNameHistoryR) NewStruct() *summonerNameHistoryR {
	return &summonerNameHistoryR{}
}

// summonerNameHistoryL is where Load methods for each relationship are stored.
type summonerNameHistoryL struct{}

var (
	summonerNameHistoryAllColumns            = []string{"puuid", "game_name", "tag_line", "rename_date"}
	summonerNameHistoryColumnsWithoutDefault = []string{"puuid", "game_name", "tag_line", "rename_date"}
	summonerNameHistoryColumnsWithDefault    = []string{}
	summonerNameHistoryPrimaryKeyColumns     = []string{"puuid", "rename_date"}
	summonerNameHistoryGeneratedColumns      = []string{}
)

type (
	// SummonerNameHistorySlice is an alias for a slice of pointers to SummonerNameHistory.
	// This should almost always be used instead of []SummonerNameHistory.
	SummonerNameHistorySlice []*SummonerNameHistory
	// SummonerNameHistoryHook is the signature for custom SummonerNameHistory hook methods
	SummonerNameHistoryHook func(context.Context, boil.ContextExecutor, *SummonerNameHistory) error

	summonerNameHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	summonerNameHistoryType                 = reflect.TypeOf(&SummonerNameHistory{})
	summonerNameHistoryMapping              = queries.MakeStructMapping(summonerNameHistoryType)
	summonerNameHistoryPrimaryKeyMapping, _ = queries.BindMapping(summonerNameHistoryType, summonerNameHistoryMapping, summonerNameHistoryPrimaryKeyColumns)
	summonerNameHistoryInsertCacheMut       sync.RWMutex
	summonerNameHistoryInsertCache          = make(map[string]insertCache)
	summonerNameHistoryUpdateCacheMut       sync.RWMutex
	summonerNameHistoryUpdateCache          = make(map[string]updateCache)
	summonerNameHistoryUpsertCacheMut       sync.RWMutex
	summonerNameHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var summonerNameHistoryAfterSelectMu sync.Mutex
var summonerNameHistoryAfterSelectHooks []SummonerNameHistoryHook

var summonerNameHistoryBeforeInsertMu sync.Mutex
var summonerNameHistoryBeforeInsertHooks []SummonerNameHistoryHook
var summonerNameHistoryAfterInsertMu sync.Mutex
var summonerNameHistoryAfterInsertHooks []SummonerNameHistoryHook

var summonerNameHistoryBeforeUpdateMu sync.Mutex
var summonerNameHistoryBeforeUpdateHooks []SummonerNameHistoryHook
var summonerNameHistoryAfterUpdateMu sync.Mutex
var summonerNameHistoryAfterUpdateHooks []SummonerNameHistoryHook

var summonerNameHistoryBeforeDeleteMu sync.Mutex
var summonerNameHistoryBeforeDeleteHooks []SummonerNameHistoryHook
var summonerNameHistoryAfterDeleteMu sync.Mutex
var summonerNameHistoryAfterDeleteHooks []SummonerNameHistoryHook

var summonerNameHistoryBeforeUpsertMu sync.Mutex
var summonerNameHistoryBeforeUpsertHooks []SummonerNameHistoryHook
var summonerNameHistoryAfterUpsertMu sync.Mutex
var summonerNameHistoryAfterUpsertHooks []SummonerNameHistoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SummonerNameHistory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range summonerNameHistoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SummonerNameHistory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range summonerNameHistoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SummonerNameHistory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range summonerNameHistoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SummonerNameHistory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range summonerNameHistoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SummonerNameHistory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range summonerNameHistoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SummonerNameHistory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range summonerNameHistoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SummonerNameHistory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range summonerNameHistoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SummonerNameHistory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range summonerNameHistoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SummonerNameHistory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range summonerNameHistoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSummonerNameHistoryHook registers your hook function for all future operations.
func AddSummonerNameHistoryHook(hookPoint boil.HookPoint, summonerNameHistoryHook SummonerNameHistoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		summonerNameHistoryAfterSelectMu.Lock()
		summonerNameHistoryAfterSelectHooks = append(summonerNameHistoryAfterSelectHooks, summonerNameHistoryHook)
		summonerNameHistoryAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		summonerNameHistoryBeforeInsertMu.Lock()
		summonerNameHistoryBeforeInsertHooks = append(summonerNameHistoryBeforeInsertHooks, summonerNameHistoryHook)
		summonerNameHistoryBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		summonerNameHistoryAfterInsertMu.Lock()
		summonerNameHistoryAfterInsertHooks = append(summonerNameHistoryAfterInsertHooks, summonerNameHistoryHook)
		summonerNameHistoryAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		summonerNameHistoryBeforeUpdateMu.Lock()
		summonerNameHistoryBeforeUpdateHooks = append(summonerNameHistoryBeforeUpdateHooks, summonerNameHistoryHook)
		summonerNameHistoryBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		summonerNameHistoryAfterUpdateMu.Lock()
		summonerNameHistoryAfterUpdateHooks = append(summonerNameHistoryAfterUpdateHooks, summonerNameHistoryHook)
		summonerNameHistoryAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		summonerNameHistoryBeforeDeleteMu.Lock()
		summonerNameHistoryBeforeDeleteHooks = append(summonerNameHistoryBeforeDeleteHooks, summonerNameHistoryHook)
		summonerNameHistoryBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		summonerNameHistoryAfterDeleteMu.Lock()
		summonerNameHistoryAfterDeleteHooks = append(summonerNameHistoryAfterDeleteHooks, summonerNameHistoryHook)
		summonerNameHistoryAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		summonerNameHistoryBeforeUpsertMu.Lock()
		summonerNameHistoryBeforeUpsertHooks = append(summonerNameHistoryBeforeUpsertHooks, summonerNameHistoryHook)
		summonerNameHistoryBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		summonerNameHistoryAfterUpsertMu.Lock()
		summonerNameHistoryAfterUpsertHooks = append(summonerNameHistoryAfterUpsertHooks, summonerNameHistoryHook)
		summonerNameHistoryAfterUpsertMu.Unlock()
	}
}

// One returns a single summonerNameHistory record from the query.
func (q summonerNameHistoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SummonerNameHistory, error) {
	o := &SummonerNameHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for summoner_name_history")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SummonerNameHistory records from the query.
func (q summonerNameHistoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (SummonerNameHistorySlice, error) {
	var o []*SummonerNameHistory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SummonerNameHistory slice")
	}

	if len(summonerNameHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SummonerNameHistory records in the query.
func (q summonerNameHistoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count summoner_name_history rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q summonerNameHistoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if summoner_name_history exists")
	}

	return count > 0, nil
}

// SummonerNameHistories retrieves all the records using an executor.
func SummonerNameHistories(mods ...qm.QueryMod) summonerNameHistoryQuery {
	mods = append(mods, qm.From("\"summoner_name_history\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"summoner_name_history\".*"})
	}

	return summonerNameHistoryQuery{q}
}

// FindSummonerNameHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSummonerNameHistory(ctx context.Context, exec boil.ContextExecutor, puuid string, renameDate time.Time, selectCols ...string) (*SummonerNameHistory, error) {
	summonerNameHistoryObj := &SummonerNameHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"summoner_name_history\" where \"puuid\"=$1 AND \"rename_date\"=$2", sel,
	)

	q := queries.Raw(query, puuid, renameDate)

	err := q.Bind(ctx, exec, summonerNameHistoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from summoner_name_history")
	}

	if err = summonerNameHistoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return summonerNameHistoryObj, err
	}

	return summonerNameHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SummonerNameHistory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no summoner_name_history provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(summonerNameHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	summonerNameHistoryInsertCacheMut.RLock()
	cache, cached := summonerNameHistoryInsertCache[key]
	summonerNameHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			summonerNameHistoryAllColumns,
			summonerNameHistoryColumnsWithDefault,
			summonerNameHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(summonerNameHistoryType, summonerNameHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(summonerNameHistoryType, summonerNameHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"summoner_name_history\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"summoner_name_history\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into summoner_name_history")
	}

	if !cached {
		summonerNameHistoryInsertCacheMut.Lock()
		summonerNameHistoryInsertCache[key] = cache
		summonerNameHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SummonerNameHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SummonerNameHistory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	summonerNameHistoryUpdateCacheMut.RLock()
	cache, cached := summonerNameHistoryUpdateCache[key]
	summonerNameHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			summonerNameHistoryAllColumns,
			summonerNameHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update summoner_name_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"summoner_name_history\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, summonerNameHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(summonerNameHistoryType, summonerNameHistoryMapping, append(wl, summonerNameHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update summoner_name_history row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for summoner_name_history")
	}

	if !cached {
		summonerNameHistoryUpdateCacheMut.Lock()
		summonerNameHistoryUpdateCache[key] = cache
		summonerNameHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q summonerNameHistoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for summoner_name_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for summoner_name_history")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SummonerNameHistorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), summonerNameHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"summoner_name_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, summonerNameHistoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in summonerNameHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all summonerNameHistory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SummonerNameHistory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no summoner_name_history provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(summonerNameHistoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	summonerNameHistoryUpsertCacheMut.RLock()
	cache, cached := summonerNameHistoryUpsertCache[key]
	summonerNameHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			summonerNameHistoryAllColumns,
			summonerNameHistoryColumnsWithDefault,
			summonerNameHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			summonerNameHistoryAllColumns,
			summonerNameHistoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert summoner_name_history, could not build update column list")
		}

		ret := strmangle.SetComplement(summonerNameHistoryAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(summonerNameHistoryPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert summoner_name_history, could not build conflict column list")
			}

			conflict = make([]string, len(summonerNameHistoryPrimaryKeyColumns))
			copy(conflict, summonerNameHistoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"summoner_name_history\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(summonerNameHistoryType, summonerNameHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(summonerNameHistoryType, summonerNameHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert summoner_name_history")
	}

	if !cached {
		summonerNameHistoryUpsertCacheMut.Lock()
		summonerNameHistoryUpsertCache[key] = cache
		summonerNameHistoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SummonerNameHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SummonerNameHistory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SummonerNameHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), summonerNameHistoryPrimaryKeyMapping)
	sql := "DELETE FROM \"summoner_name_history\" WHERE \"puuid\"=$1 AND \"rename_date\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from summoner_name_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for summoner_name_history")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q summonerNameHistoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no summonerNameHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from summoner_name_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for summoner_name_history")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SummonerNameHistorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(summonerNameHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), summonerNameHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"summoner_name_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, summonerNameHistoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from summonerNameHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for summoner_name_history")
	}

	if len(summonerNameHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SummonerNameHistory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSummonerNameHistory(ctx, exec, o.Puuid, o.RenameDate)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SummonerNameHistorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SummonerNameHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), summonerNameHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"summoner_name_history\".* FROM \"summoner_name_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, summonerNameHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SummonerNameHistorySlice")
	}

	*o = slice

	return nil
}

// SummonerNameHistoryExists checks if the SummonerNameHistory row exists.
func SummonerNameHistoryExists(ctx context.Context, exec boil.ContextExecutor, puuid string, renameDate time.Time) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"summoner_name_history\" where \"puuid\"=$1 AND \"rename_date\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, puuid, renameDate)
	}
	row := exec.QueryRowContext(ctx, sql, puuid, renameDate)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if summoner_name_history exists")
	}

	return exists, nil
}

// Exists checks if the SummonerNameHistory row exists.
func (o *SummonerNameHistory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SummonerNameHistoryExists(ctx, exec, o.Puuid, o.RenameDate)
}
