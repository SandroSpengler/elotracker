// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RankedSeason is an object representing the database table.
type RankedSeason struct {
	Rid               int       `boil:"rid" json:"rid" toml:"rid" yaml:"rid"`
	RankedSeasonID    int       `boil:"ranked_season_id" json:"ranked_season_id" toml:"ranked_season_id" yaml:"ranked_season_id"`
	TotalRankedSplits int       `boil:"total_ranked_splits" json:"total_ranked_splits" toml:"total_ranked_splits" yaml:"total_ranked_splits"`
	SplitID           int       `boil:"split_id" json:"split_id" toml:"split_id" yaml:"split_id"`
	StartDate         time.Time `boil:"start_date" json:"start_date" toml:"start_date" yaml:"start_date"`
	EndDate           time.Time `boil:"end_date" json:"end_date" toml:"end_date" yaml:"end_date"`

	R *rankedSeasonR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L rankedSeasonL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RankedSeasonColumns = struct {
	Rid               string
	RankedSeasonID    string
	TotalRankedSplits string
	SplitID           string
	StartDate         string
	EndDate           string
}{
	Rid:               "rid",
	RankedSeasonID:    "ranked_season_id",
	TotalRankedSplits: "total_ranked_splits",
	SplitID:           "split_id",
	StartDate:         "start_date",
	EndDate:           "end_date",
}

var RankedSeasonTableColumns = struct {
	Rid               string
	RankedSeasonID    string
	TotalRankedSplits string
	SplitID           string
	StartDate         string
	EndDate           string
}{
	Rid:               "ranked_season.rid",
	RankedSeasonID:    "ranked_season.ranked_season_id",
	TotalRankedSplits: "ranked_season.total_ranked_splits",
	SplitID:           "ranked_season.split_id",
	StartDate:         "ranked_season.start_date",
	EndDate:           "ranked_season.end_date",
}

// Generated where

var RankedSeasonWhere = struct {
	Rid               whereHelperint
	RankedSeasonID    whereHelperint
	TotalRankedSplits whereHelperint
	SplitID           whereHelperint
	StartDate         whereHelpertime_Time
	EndDate           whereHelpertime_Time
}{
	Rid:               whereHelperint{field: "\"ranked_season\".\"rid\""},
	RankedSeasonID:    whereHelperint{field: "\"ranked_season\".\"ranked_season_id\""},
	TotalRankedSplits: whereHelperint{field: "\"ranked_season\".\"total_ranked_splits\""},
	SplitID:           whereHelperint{field: "\"ranked_season\".\"split_id\""},
	StartDate:         whereHelpertime_Time{field: "\"ranked_season\".\"start_date\""},
	EndDate:           whereHelpertime_Time{field: "\"ranked_season\".\"end_date\""},
}

// RankedSeasonRels is where relationship names are stored.
var RankedSeasonRels = struct {
}{}

// rankedSeasonR is where relationships are stored.
type rankedSeasonR struct {
}

// NewStruct creates a new relationship struct
func (*rankedSeasonR) NewStruct() *rankedSeasonR {
	return &rankedSeasonR{}
}

// rankedSeasonL is where Load methods for each relationship are stored.
type rankedSeasonL struct{}

var (
	rankedSeasonAllColumns            = []string{"rid", "ranked_season_id", "total_ranked_splits", "split_id", "start_date", "end_date"}
	rankedSeasonColumnsWithoutDefault = []string{"rid", "ranked_season_id", "total_ranked_splits", "split_id", "start_date", "end_date"}
	rankedSeasonColumnsWithDefault    = []string{}
	rankedSeasonPrimaryKeyColumns     = []string{"rid"}
	rankedSeasonGeneratedColumns      = []string{}
)

type (
	// RankedSeasonSlice is an alias for a slice of pointers to RankedSeason.
	// This should almost always be used instead of []RankedSeason.
	RankedSeasonSlice []*RankedSeason
	// RankedSeasonHook is the signature for custom RankedSeason hook methods
	RankedSeasonHook func(context.Context, boil.ContextExecutor, *RankedSeason) error

	rankedSeasonQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	rankedSeasonType                 = reflect.TypeOf(&RankedSeason{})
	rankedSeasonMapping              = queries.MakeStructMapping(rankedSeasonType)
	rankedSeasonPrimaryKeyMapping, _ = queries.BindMapping(rankedSeasonType, rankedSeasonMapping, rankedSeasonPrimaryKeyColumns)
	rankedSeasonInsertCacheMut       sync.RWMutex
	rankedSeasonInsertCache          = make(map[string]insertCache)
	rankedSeasonUpdateCacheMut       sync.RWMutex
	rankedSeasonUpdateCache          = make(map[string]updateCache)
	rankedSeasonUpsertCacheMut       sync.RWMutex
	rankedSeasonUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var rankedSeasonAfterSelectMu sync.Mutex
var rankedSeasonAfterSelectHooks []RankedSeasonHook

var rankedSeasonBeforeInsertMu sync.Mutex
var rankedSeasonBeforeInsertHooks []RankedSeasonHook
var rankedSeasonAfterInsertMu sync.Mutex
var rankedSeasonAfterInsertHooks []RankedSeasonHook

var rankedSeasonBeforeUpdateMu sync.Mutex
var rankedSeasonBeforeUpdateHooks []RankedSeasonHook
var rankedSeasonAfterUpdateMu sync.Mutex
var rankedSeasonAfterUpdateHooks []RankedSeasonHook

var rankedSeasonBeforeDeleteMu sync.Mutex
var rankedSeasonBeforeDeleteHooks []RankedSeasonHook
var rankedSeasonAfterDeleteMu sync.Mutex
var rankedSeasonAfterDeleteHooks []RankedSeasonHook

var rankedSeasonBeforeUpsertMu sync.Mutex
var rankedSeasonBeforeUpsertHooks []RankedSeasonHook
var rankedSeasonAfterUpsertMu sync.Mutex
var rankedSeasonAfterUpsertHooks []RankedSeasonHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RankedSeason) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rankedSeasonAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RankedSeason) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rankedSeasonBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RankedSeason) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rankedSeasonAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RankedSeason) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rankedSeasonBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RankedSeason) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rankedSeasonAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RankedSeason) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rankedSeasonBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RankedSeason) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rankedSeasonAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RankedSeason) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rankedSeasonBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RankedSeason) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rankedSeasonAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRankedSeasonHook registers your hook function for all future operations.
func AddRankedSeasonHook(hookPoint boil.HookPoint, rankedSeasonHook RankedSeasonHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		rankedSeasonAfterSelectMu.Lock()
		rankedSeasonAfterSelectHooks = append(rankedSeasonAfterSelectHooks, rankedSeasonHook)
		rankedSeasonAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		rankedSeasonBeforeInsertMu.Lock()
		rankedSeasonBeforeInsertHooks = append(rankedSeasonBeforeInsertHooks, rankedSeasonHook)
		rankedSeasonBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		rankedSeasonAfterInsertMu.Lock()
		rankedSeasonAfterInsertHooks = append(rankedSeasonAfterInsertHooks, rankedSeasonHook)
		rankedSeasonAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		rankedSeasonBeforeUpdateMu.Lock()
		rankedSeasonBeforeUpdateHooks = append(rankedSeasonBeforeUpdateHooks, rankedSeasonHook)
		rankedSeasonBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		rankedSeasonAfterUpdateMu.Lock()
		rankedSeasonAfterUpdateHooks = append(rankedSeasonAfterUpdateHooks, rankedSeasonHook)
		rankedSeasonAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		rankedSeasonBeforeDeleteMu.Lock()
		rankedSeasonBeforeDeleteHooks = append(rankedSeasonBeforeDeleteHooks, rankedSeasonHook)
		rankedSeasonBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		rankedSeasonAfterDeleteMu.Lock()
		rankedSeasonAfterDeleteHooks = append(rankedSeasonAfterDeleteHooks, rankedSeasonHook)
		rankedSeasonAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		rankedSeasonBeforeUpsertMu.Lock()
		rankedSeasonBeforeUpsertHooks = append(rankedSeasonBeforeUpsertHooks, rankedSeasonHook)
		rankedSeasonBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		rankedSeasonAfterUpsertMu.Lock()
		rankedSeasonAfterUpsertHooks = append(rankedSeasonAfterUpsertHooks, rankedSeasonHook)
		rankedSeasonAfterUpsertMu.Unlock()
	}
}

// One returns a single rankedSeason record from the query.
func (q rankedSeasonQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RankedSeason, error) {
	o := &RankedSeason{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ranked_season")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RankedSeason records from the query.
func (q rankedSeasonQuery) All(ctx context.Context, exec boil.ContextExecutor) (RankedSeasonSlice, error) {
	var o []*RankedSeason

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RankedSeason slice")
	}

	if len(rankedSeasonAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RankedSeason records in the query.
func (q rankedSeasonQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ranked_season rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q rankedSeasonQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ranked_season exists")
	}

	return count > 0, nil
}

// RankedSeasons retrieves all the records using an executor.
func RankedSeasons(mods ...qm.QueryMod) rankedSeasonQuery {
	mods = append(mods, qm.From("\"ranked_season\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"ranked_season\".*"})
	}

	return rankedSeasonQuery{q}
}

// FindRankedSeason retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRankedSeason(ctx context.Context, exec boil.ContextExecutor, rid int, selectCols ...string) (*RankedSeason, error) {
	rankedSeasonObj := &RankedSeason{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ranked_season\" where \"rid\"=$1", sel,
	)

	q := queries.Raw(query, rid)

	err := q.Bind(ctx, exec, rankedSeasonObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ranked_season")
	}

	if err = rankedSeasonObj.doAfterSelectHooks(ctx, exec); err != nil {
		return rankedSeasonObj, err
	}

	return rankedSeasonObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RankedSeason) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ranked_season provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rankedSeasonColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	rankedSeasonInsertCacheMut.RLock()
	cache, cached := rankedSeasonInsertCache[key]
	rankedSeasonInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			rankedSeasonAllColumns,
			rankedSeasonColumnsWithDefault,
			rankedSeasonColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(rankedSeasonType, rankedSeasonMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(rankedSeasonType, rankedSeasonMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ranked_season\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ranked_season\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ranked_season")
	}

	if !cached {
		rankedSeasonInsertCacheMut.Lock()
		rankedSeasonInsertCache[key] = cache
		rankedSeasonInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RankedSeason.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RankedSeason) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	rankedSeasonUpdateCacheMut.RLock()
	cache, cached := rankedSeasonUpdateCache[key]
	rankedSeasonUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			rankedSeasonAllColumns,
			rankedSeasonPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update ranked_season, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ranked_season\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, rankedSeasonPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(rankedSeasonType, rankedSeasonMapping, append(wl, rankedSeasonPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update ranked_season row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for ranked_season")
	}

	if !cached {
		rankedSeasonUpdateCacheMut.Lock()
		rankedSeasonUpdateCache[key] = cache
		rankedSeasonUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q rankedSeasonQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for ranked_season")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for ranked_season")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RankedSeasonSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rankedSeasonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ranked_season\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, rankedSeasonPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in rankedSeason slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all rankedSeason")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RankedSeason) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no ranked_season provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rankedSeasonColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	rankedSeasonUpsertCacheMut.RLock()
	cache, cached := rankedSeasonUpsertCache[key]
	rankedSeasonUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			rankedSeasonAllColumns,
			rankedSeasonColumnsWithDefault,
			rankedSeasonColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			rankedSeasonAllColumns,
			rankedSeasonPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert ranked_season, could not build update column list")
		}

		ret := strmangle.SetComplement(rankedSeasonAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(rankedSeasonPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert ranked_season, could not build conflict column list")
			}

			conflict = make([]string, len(rankedSeasonPrimaryKeyColumns))
			copy(conflict, rankedSeasonPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"ranked_season\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(rankedSeasonType, rankedSeasonMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(rankedSeasonType, rankedSeasonMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert ranked_season")
	}

	if !cached {
		rankedSeasonUpsertCacheMut.Lock()
		rankedSeasonUpsertCache[key] = cache
		rankedSeasonUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RankedSeason record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RankedSeason) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RankedSeason provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), rankedSeasonPrimaryKeyMapping)
	sql := "DELETE FROM \"ranked_season\" WHERE \"rid\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from ranked_season")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for ranked_season")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q rankedSeasonQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no rankedSeasonQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ranked_season")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ranked_season")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RankedSeasonSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(rankedSeasonBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rankedSeasonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ranked_season\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rankedSeasonPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from rankedSeason slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ranked_season")
	}

	if len(rankedSeasonAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RankedSeason) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRankedSeason(ctx, exec, o.Rid)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RankedSeasonSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RankedSeasonSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), rankedSeasonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ranked_season\".* FROM \"ranked_season\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, rankedSeasonPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RankedSeasonSlice")
	}

	*o = slice

	return nil
}

// RankedSeasonExists checks if the RankedSeason row exists.
func RankedSeasonExists(ctx context.Context, exec boil.ContextExecutor, rid int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ranked_season\" where \"rid\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, rid)
	}
	row := exec.QueryRowContext(ctx, sql, rid)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ranked_season exists")
	}

	return exists, nil
}

// Exists checks if the RankedSeason row exists.
func (o *RankedSeason) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RankedSeasonExists(ctx, exec, o.Rid)
}
