// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SummonerMatch is an object representing the database table.
type SummonerMatch struct {
	Puuid                     string       `boil:"puuid" json:"puuid" toml:"puuid" yaml:"puuid"`
	MatchID                   string       `boil:"match_id" json:"match_id" toml:"match_id" yaml:"match_id"`
	GameMode                  null.String  `boil:"game_mode" json:"game_mode,omitempty" toml:"game_mode" yaml:"game_mode,omitempty"`
	GameType                  null.String  `boil:"game_type" json:"game_type,omitempty" toml:"game_type" yaml:"game_type,omitempty"`
	QueueID                   null.String  `boil:"queue_id" json:"queue_id,omitempty" toml:"queue_id" yaml:"queue_id,omitempty"`
	Kills                     null.Int     `boil:"kills" json:"kills,omitempty" toml:"kills" yaml:"kills,omitempty"`
	Assists                   null.Int     `boil:"assists" json:"assists,omitempty" toml:"assists" yaml:"assists,omitempty"`
	Deaths                    null.Int     `boil:"deaths" json:"deaths,omitempty" toml:"deaths" yaml:"deaths,omitempty"`
	Kda                       null.Float64 `boil:"kda" json:"kda,omitempty" toml:"kda" yaml:"kda,omitempty"`
	KillParticipation         null.Float64 `boil:"kill_participation" json:"kill_participation,omitempty" toml:"kill_participation" yaml:"kill_participation,omitempty"`
	Processed                 null.Bool    `boil:"processed" json:"processed,omitempty" toml:"processed" yaml:"processed,omitempty"`
	GameStartTime             null.Time    `boil:"game_start_time" json:"game_start_time,omitempty" toml:"game_start_time" yaml:"game_start_time,omitempty"`
	GameEndTime               null.Time    `boil:"game_end_time" json:"game_end_time,omitempty" toml:"game_end_time" yaml:"game_end_time,omitempty"`
	GameEndedInEarlySurrender null.Bool    `boil:"game_ended_in_early_surrender" json:"game_ended_in_early_surrender,omitempty" toml:"game_ended_in_early_surrender" yaml:"game_ended_in_early_surrender,omitempty"`
	Win                       null.Bool    `boil:"win" json:"win,omitempty" toml:"win" yaml:"win,omitempty"`

	R *summonerMatchR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L summonerMatchL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SummonerMatchColumns = struct {
	Puuid                     string
	MatchID                   string
	GameMode                  string
	GameType                  string
	QueueID                   string
	Kills                     string
	Assists                   string
	Deaths                    string
	Kda                       string
	KillParticipation         string
	Processed                 string
	GameStartTime             string
	GameEndTime               string
	GameEndedInEarlySurrender string
	Win                       string
}{
	Puuid:                     "puuid",
	MatchID:                   "match_id",
	GameMode:                  "game_mode",
	GameType:                  "game_type",
	QueueID:                   "queue_id",
	Kills:                     "kills",
	Assists:                   "assists",
	Deaths:                    "deaths",
	Kda:                       "kda",
	KillParticipation:         "kill_participation",
	Processed:                 "processed",
	GameStartTime:             "game_start_time",
	GameEndTime:               "game_end_time",
	GameEndedInEarlySurrender: "game_ended_in_early_surrender",
	Win:                       "win",
}

var SummonerMatchTableColumns = struct {
	Puuid                     string
	MatchID                   string
	GameMode                  string
	GameType                  string
	QueueID                   string
	Kills                     string
	Assists                   string
	Deaths                    string
	Kda                       string
	KillParticipation         string
	Processed                 string
	GameStartTime             string
	GameEndTime               string
	GameEndedInEarlySurrender string
	Win                       string
}{
	Puuid:                     "summoner_matches.puuid",
	MatchID:                   "summoner_matches.match_id",
	GameMode:                  "summoner_matches.game_mode",
	GameType:                  "summoner_matches.game_type",
	QueueID:                   "summoner_matches.queue_id",
	Kills:                     "summoner_matches.kills",
	Assists:                   "summoner_matches.assists",
	Deaths:                    "summoner_matches.deaths",
	Kda:                       "summoner_matches.kda",
	KillParticipation:         "summoner_matches.kill_participation",
	Processed:                 "summoner_matches.processed",
	GameStartTime:             "summoner_matches.game_start_time",
	GameEndTime:               "summoner_matches.game_end_time",
	GameEndedInEarlySurrender: "summoner_matches.game_ended_in_early_surrender",
	Win:                       "summoner_matches.win",
}

// Generated where

type whereHelpernull_Float64 struct{ field string }

func (w whereHelpernull_Float64) EQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float64) NEQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float64) LT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float64) LTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float64) GT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float64) GTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Float64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Float64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Float64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var SummonerMatchWhere = struct {
	Puuid                     whereHelperstring
	MatchID                   whereHelperstring
	GameMode                  whereHelpernull_String
	GameType                  whereHelpernull_String
	QueueID                   whereHelpernull_String
	Kills                     whereHelpernull_Int
	Assists                   whereHelpernull_Int
	Deaths                    whereHelpernull_Int
	Kda                       whereHelpernull_Float64
	KillParticipation         whereHelpernull_Float64
	Processed                 whereHelpernull_Bool
	GameStartTime             whereHelpernull_Time
	GameEndTime               whereHelpernull_Time
	GameEndedInEarlySurrender whereHelpernull_Bool
	Win                       whereHelpernull_Bool
}{
	Puuid:                     whereHelperstring{field: "\"summoner_matches\".\"puuid\""},
	MatchID:                   whereHelperstring{field: "\"summoner_matches\".\"match_id\""},
	GameMode:                  whereHelpernull_String{field: "\"summoner_matches\".\"game_mode\""},
	GameType:                  whereHelpernull_String{field: "\"summoner_matches\".\"game_type\""},
	QueueID:                   whereHelpernull_String{field: "\"summoner_matches\".\"queue_id\""},
	Kills:                     whereHelpernull_Int{field: "\"summoner_matches\".\"kills\""},
	Assists:                   whereHelpernull_Int{field: "\"summoner_matches\".\"assists\""},
	Deaths:                    whereHelpernull_Int{field: "\"summoner_matches\".\"deaths\""},
	Kda:                       whereHelpernull_Float64{field: "\"summoner_matches\".\"kda\""},
	KillParticipation:         whereHelpernull_Float64{field: "\"summoner_matches\".\"kill_participation\""},
	Processed:                 whereHelpernull_Bool{field: "\"summoner_matches\".\"processed\""},
	GameStartTime:             whereHelpernull_Time{field: "\"summoner_matches\".\"game_start_time\""},
	GameEndTime:               whereHelpernull_Time{field: "\"summoner_matches\".\"game_end_time\""},
	GameEndedInEarlySurrender: whereHelpernull_Bool{field: "\"summoner_matches\".\"game_ended_in_early_surrender\""},
	Win:                       whereHelpernull_Bool{field: "\"summoner_matches\".\"win\""},
}

// SummonerMatchRels is where relationship names are stored.
var SummonerMatchRels = struct {
}{}

// summonerMatchR is where relationships are stored.
type summonerMatchR struct {
}

// NewStruct creates a new relationship struct
func (*summonerMatchR) NewStruct() *summonerMatchR {
	return &summonerMatchR{}
}

// summonerMatchL is where Load methods for each relationship are stored.
type summonerMatchL struct{}

var (
	summonerMatchAllColumns            = []string{"puuid", "match_id", "game_mode", "game_type", "queue_id", "kills", "assists", "deaths", "kda", "kill_participation", "processed", "game_start_time", "game_end_time", "game_ended_in_early_surrender", "win"}
	summonerMatchColumnsWithoutDefault = []string{"puuid", "match_id"}
	summonerMatchColumnsWithDefault    = []string{"game_mode", "game_type", "queue_id", "kills", "assists", "deaths", "kda", "kill_participation", "processed", "game_start_time", "game_end_time", "game_ended_in_early_surrender", "win"}
	summonerMatchPrimaryKeyColumns     = []string{"puuid", "match_id"}
	summonerMatchGeneratedColumns      = []string{}
)

type (
	// SummonerMatchSlice is an alias for a slice of pointers to SummonerMatch.
	// This should almost always be used instead of []SummonerMatch.
	SummonerMatchSlice []*SummonerMatch
	// SummonerMatchHook is the signature for custom SummonerMatch hook methods
	SummonerMatchHook func(context.Context, boil.ContextExecutor, *SummonerMatch) error

	summonerMatchQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	summonerMatchType                 = reflect.TypeOf(&SummonerMatch{})
	summonerMatchMapping              = queries.MakeStructMapping(summonerMatchType)
	summonerMatchPrimaryKeyMapping, _ = queries.BindMapping(summonerMatchType, summonerMatchMapping, summonerMatchPrimaryKeyColumns)
	summonerMatchInsertCacheMut       sync.RWMutex
	summonerMatchInsertCache          = make(map[string]insertCache)
	summonerMatchUpdateCacheMut       sync.RWMutex
	summonerMatchUpdateCache          = make(map[string]updateCache)
	summonerMatchUpsertCacheMut       sync.RWMutex
	summonerMatchUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var summonerMatchAfterSelectMu sync.Mutex
var summonerMatchAfterSelectHooks []SummonerMatchHook

var summonerMatchBeforeInsertMu sync.Mutex
var summonerMatchBeforeInsertHooks []SummonerMatchHook
var summonerMatchAfterInsertMu sync.Mutex
var summonerMatchAfterInsertHooks []SummonerMatchHook

var summonerMatchBeforeUpdateMu sync.Mutex
var summonerMatchBeforeUpdateHooks []SummonerMatchHook
var summonerMatchAfterUpdateMu sync.Mutex
var summonerMatchAfterUpdateHooks []SummonerMatchHook

var summonerMatchBeforeDeleteMu sync.Mutex
var summonerMatchBeforeDeleteHooks []SummonerMatchHook
var summonerMatchAfterDeleteMu sync.Mutex
var summonerMatchAfterDeleteHooks []SummonerMatchHook

var summonerMatchBeforeUpsertMu sync.Mutex
var summonerMatchBeforeUpsertHooks []SummonerMatchHook
var summonerMatchAfterUpsertMu sync.Mutex
var summonerMatchAfterUpsertHooks []SummonerMatchHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SummonerMatch) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range summonerMatchAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SummonerMatch) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range summonerMatchBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SummonerMatch) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range summonerMatchAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SummonerMatch) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range summonerMatchBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SummonerMatch) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range summonerMatchAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SummonerMatch) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range summonerMatchBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SummonerMatch) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range summonerMatchAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SummonerMatch) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range summonerMatchBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SummonerMatch) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range summonerMatchAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSummonerMatchHook registers your hook function for all future operations.
func AddSummonerMatchHook(hookPoint boil.HookPoint, summonerMatchHook SummonerMatchHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		summonerMatchAfterSelectMu.Lock()
		summonerMatchAfterSelectHooks = append(summonerMatchAfterSelectHooks, summonerMatchHook)
		summonerMatchAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		summonerMatchBeforeInsertMu.Lock()
		summonerMatchBeforeInsertHooks = append(summonerMatchBeforeInsertHooks, summonerMatchHook)
		summonerMatchBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		summonerMatchAfterInsertMu.Lock()
		summonerMatchAfterInsertHooks = append(summonerMatchAfterInsertHooks, summonerMatchHook)
		summonerMatchAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		summonerMatchBeforeUpdateMu.Lock()
		summonerMatchBeforeUpdateHooks = append(summonerMatchBeforeUpdateHooks, summonerMatchHook)
		summonerMatchBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		summonerMatchAfterUpdateMu.Lock()
		summonerMatchAfterUpdateHooks = append(summonerMatchAfterUpdateHooks, summonerMatchHook)
		summonerMatchAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		summonerMatchBeforeDeleteMu.Lock()
		summonerMatchBeforeDeleteHooks = append(summonerMatchBeforeDeleteHooks, summonerMatchHook)
		summonerMatchBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		summonerMatchAfterDeleteMu.Lock()
		summonerMatchAfterDeleteHooks = append(summonerMatchAfterDeleteHooks, summonerMatchHook)
		summonerMatchAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		summonerMatchBeforeUpsertMu.Lock()
		summonerMatchBeforeUpsertHooks = append(summonerMatchBeforeUpsertHooks, summonerMatchHook)
		summonerMatchBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		summonerMatchAfterUpsertMu.Lock()
		summonerMatchAfterUpsertHooks = append(summonerMatchAfterUpsertHooks, summonerMatchHook)
		summonerMatchAfterUpsertMu.Unlock()
	}
}

// One returns a single summonerMatch record from the query.
func (q summonerMatchQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SummonerMatch, error) {
	o := &SummonerMatch{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for summoner_matches")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SummonerMatch records from the query.
func (q summonerMatchQuery) All(ctx context.Context, exec boil.ContextExecutor) (SummonerMatchSlice, error) {
	var o []*SummonerMatch

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SummonerMatch slice")
	}

	if len(summonerMatchAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SummonerMatch records in the query.
func (q summonerMatchQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count summoner_matches rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q summonerMatchQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if summoner_matches exists")
	}

	return count > 0, nil
}

// SummonerMatches retrieves all the records using an executor.
func SummonerMatches(mods ...qm.QueryMod) summonerMatchQuery {
	mods = append(mods, qm.From("\"summoner_matches\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"summoner_matches\".*"})
	}

	return summonerMatchQuery{q}
}

// FindSummonerMatch retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSummonerMatch(ctx context.Context, exec boil.ContextExecutor, puuid string, matchID string, selectCols ...string) (*SummonerMatch, error) {
	summonerMatchObj := &SummonerMatch{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"summoner_matches\" where \"puuid\"=$1 AND \"match_id\"=$2", sel,
	)

	q := queries.Raw(query, puuid, matchID)

	err := q.Bind(ctx, exec, summonerMatchObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from summoner_matches")
	}

	if err = summonerMatchObj.doAfterSelectHooks(ctx, exec); err != nil {
		return summonerMatchObj, err
	}

	return summonerMatchObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SummonerMatch) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no summoner_matches provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(summonerMatchColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	summonerMatchInsertCacheMut.RLock()
	cache, cached := summonerMatchInsertCache[key]
	summonerMatchInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			summonerMatchAllColumns,
			summonerMatchColumnsWithDefault,
			summonerMatchColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(summonerMatchType, summonerMatchMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(summonerMatchType, summonerMatchMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"summoner_matches\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"summoner_matches\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into summoner_matches")
	}

	if !cached {
		summonerMatchInsertCacheMut.Lock()
		summonerMatchInsertCache[key] = cache
		summonerMatchInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SummonerMatch.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SummonerMatch) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	summonerMatchUpdateCacheMut.RLock()
	cache, cached := summonerMatchUpdateCache[key]
	summonerMatchUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			summonerMatchAllColumns,
			summonerMatchPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update summoner_matches, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"summoner_matches\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, summonerMatchPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(summonerMatchType, summonerMatchMapping, append(wl, summonerMatchPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update summoner_matches row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for summoner_matches")
	}

	if !cached {
		summonerMatchUpdateCacheMut.Lock()
		summonerMatchUpdateCache[key] = cache
		summonerMatchUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q summonerMatchQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for summoner_matches")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for summoner_matches")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SummonerMatchSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), summonerMatchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"summoner_matches\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, summonerMatchPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in summonerMatch slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all summonerMatch")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SummonerMatch) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no summoner_matches provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(summonerMatchColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	summonerMatchUpsertCacheMut.RLock()
	cache, cached := summonerMatchUpsertCache[key]
	summonerMatchUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			summonerMatchAllColumns,
			summonerMatchColumnsWithDefault,
			summonerMatchColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			summonerMatchAllColumns,
			summonerMatchPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert summoner_matches, could not build update column list")
		}

		ret := strmangle.SetComplement(summonerMatchAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(summonerMatchPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert summoner_matches, could not build conflict column list")
			}

			conflict = make([]string, len(summonerMatchPrimaryKeyColumns))
			copy(conflict, summonerMatchPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"summoner_matches\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(summonerMatchType, summonerMatchMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(summonerMatchType, summonerMatchMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert summoner_matches")
	}

	if !cached {
		summonerMatchUpsertCacheMut.Lock()
		summonerMatchUpsertCache[key] = cache
		summonerMatchUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SummonerMatch record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SummonerMatch) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SummonerMatch provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), summonerMatchPrimaryKeyMapping)
	sql := "DELETE FROM \"summoner_matches\" WHERE \"puuid\"=$1 AND \"match_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from summoner_matches")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for summoner_matches")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q summonerMatchQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no summonerMatchQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from summoner_matches")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for summoner_matches")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SummonerMatchSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(summonerMatchBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), summonerMatchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"summoner_matches\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, summonerMatchPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from summonerMatch slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for summoner_matches")
	}

	if len(summonerMatchAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SummonerMatch) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSummonerMatch(ctx, exec, o.Puuid, o.MatchID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SummonerMatchSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SummonerMatchSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), summonerMatchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"summoner_matches\".* FROM \"summoner_matches\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, summonerMatchPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SummonerMatchSlice")
	}

	*o = slice

	return nil
}

// SummonerMatchExists checks if the SummonerMatch row exists.
func SummonerMatchExists(ctx context.Context, exec boil.ContextExecutor, puuid string, matchID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"summoner_matches\" where \"puuid\"=$1 AND \"match_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, puuid, matchID)
	}
	row := exec.QueryRowContext(ctx, sql, puuid, matchID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if summoner_matches exists")
	}

	return exists, nil
}

// Exists checks if the SummonerMatch row exists.
func (o *SummonerMatch) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SummonerMatchExists(ctx, exec, o.Puuid, o.MatchID)
}
