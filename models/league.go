// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// League is an object representing the database table.
type League struct {
	LeagueID         string    `boil:"league_id" json:"league_id" toml:"league_id" yaml:"league_id"`
	QueueType        string    `boil:"queue_type" json:"queue_type" toml:"queue_type" yaml:"queue_type"`
	Tier             string    `boil:"tier" json:"tier" toml:"tier" yaml:"tier"`
	Rank             string    `boil:"rank" json:"rank" toml:"rank" yaml:"rank"`
	SummonerID       string    `boil:"summoner_id" json:"summoner_id" toml:"summoner_id" yaml:"summoner_id"`
	LeaguePoints     int       `boil:"league_points" json:"league_points" toml:"league_points" yaml:"league_points"`
	Wins             int       `boil:"wins" json:"wins" toml:"wins" yaml:"wins"`
	Losses           int       `boil:"losses" json:"losses" toml:"losses" yaml:"losses"`
	Veteran          bool      `boil:"veteran" json:"veteran" toml:"veteran" yaml:"veteran"`
	Inactive         bool      `boil:"inactive" json:"inactive" toml:"inactive" yaml:"inactive"`
	Freshblood       bool      `boil:"freshblood" json:"freshblood" toml:"freshblood" yaml:"freshblood"`
	Hotstreak        bool      `boil:"hotstreak" json:"hotstreak" toml:"hotstreak" yaml:"hotstreak"`
	LastLeagueUpdate null.Time `boil:"last_league_update" json:"last_league_update,omitempty" toml:"last_league_update" yaml:"last_league_update,omitempty"`

	R *leagueR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L leagueL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LeagueColumns = struct {
	LeagueID         string
	QueueType        string
	Tier             string
	Rank             string
	SummonerID       string
	LeaguePoints     string
	Wins             string
	Losses           string
	Veteran          string
	Inactive         string
	Freshblood       string
	Hotstreak        string
	LastLeagueUpdate string
}{
	LeagueID:         "league_id",
	QueueType:        "queue_type",
	Tier:             "tier",
	Rank:             "rank",
	SummonerID:       "summoner_id",
	LeaguePoints:     "league_points",
	Wins:             "wins",
	Losses:           "losses",
	Veteran:          "veteran",
	Inactive:         "inactive",
	Freshblood:       "freshblood",
	Hotstreak:        "hotstreak",
	LastLeagueUpdate: "last_league_update",
}

var LeagueTableColumns = struct {
	LeagueID         string
	QueueType        string
	Tier             string
	Rank             string
	SummonerID       string
	LeaguePoints     string
	Wins             string
	Losses           string
	Veteran          string
	Inactive         string
	Freshblood       string
	Hotstreak        string
	LastLeagueUpdate string
}{
	LeagueID:         "league.league_id",
	QueueType:        "league.queue_type",
	Tier:             "league.tier",
	Rank:             "league.rank",
	SummonerID:       "league.summoner_id",
	LeaguePoints:     "league.league_points",
	Wins:             "league.wins",
	Losses:           "league.losses",
	Veteran:          "league.veteran",
	Inactive:         "league.inactive",
	Freshblood:       "league.freshblood",
	Hotstreak:        "league.hotstreak",
	LastLeagueUpdate: "league.last_league_update",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var LeagueWhere = struct {
	LeagueID         whereHelperstring
	QueueType        whereHelperstring
	Tier             whereHelperstring
	Rank             whereHelperstring
	SummonerID       whereHelperstring
	LeaguePoints     whereHelperint
	Wins             whereHelperint
	Losses           whereHelperint
	Veteran          whereHelperbool
	Inactive         whereHelperbool
	Freshblood       whereHelperbool
	Hotstreak        whereHelperbool
	LastLeagueUpdate whereHelpernull_Time
}{
	LeagueID:         whereHelperstring{field: "\"league\".\"league_id\""},
	QueueType:        whereHelperstring{field: "\"league\".\"queue_type\""},
	Tier:             whereHelperstring{field: "\"league\".\"tier\""},
	Rank:             whereHelperstring{field: "\"league\".\"rank\""},
	SummonerID:       whereHelperstring{field: "\"league\".\"summoner_id\""},
	LeaguePoints:     whereHelperint{field: "\"league\".\"league_points\""},
	Wins:             whereHelperint{field: "\"league\".\"wins\""},
	Losses:           whereHelperint{field: "\"league\".\"losses\""},
	Veteran:          whereHelperbool{field: "\"league\".\"veteran\""},
	Inactive:         whereHelperbool{field: "\"league\".\"inactive\""},
	Freshblood:       whereHelperbool{field: "\"league\".\"freshblood\""},
	Hotstreak:        whereHelperbool{field: "\"league\".\"hotstreak\""},
	LastLeagueUpdate: whereHelpernull_Time{field: "\"league\".\"last_league_update\""},
}

// LeagueRels is where relationship names are stored.
var LeagueRels = struct {
}{}

// leagueR is where relationships are stored.
type leagueR struct {
}

// NewStruct creates a new relationship struct
func (*leagueR) NewStruct() *leagueR {
	return &leagueR{}
}

// leagueL is where Load methods for each relationship are stored.
type leagueL struct{}

var (
	leagueAllColumns            = []string{"league_id", "queue_type", "tier", "rank", "summoner_id", "league_points", "wins", "losses", "veteran", "inactive", "freshblood", "hotstreak", "last_league_update"}
	leagueColumnsWithoutDefault = []string{"league_id", "queue_type", "tier", "rank", "summoner_id", "league_points", "wins", "losses", "veteran", "inactive", "freshblood", "hotstreak"}
	leagueColumnsWithDefault    = []string{"last_league_update"}
	leaguePrimaryKeyColumns     = []string{"league_id", "summoner_id"}
	leagueGeneratedColumns      = []string{}
)

type (
	// LeagueSlice is an alias for a slice of pointers to League.
	// This should almost always be used instead of []League.
	LeagueSlice []*League
	// LeagueHook is the signature for custom League hook methods
	LeagueHook func(context.Context, boil.ContextExecutor, *League) error

	leagueQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	leagueType                 = reflect.TypeOf(&League{})
	leagueMapping              = queries.MakeStructMapping(leagueType)
	leaguePrimaryKeyMapping, _ = queries.BindMapping(leagueType, leagueMapping, leaguePrimaryKeyColumns)
	leagueInsertCacheMut       sync.RWMutex
	leagueInsertCache          = make(map[string]insertCache)
	leagueUpdateCacheMut       sync.RWMutex
	leagueUpdateCache          = make(map[string]updateCache)
	leagueUpsertCacheMut       sync.RWMutex
	leagueUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var leagueAfterSelectMu sync.Mutex
var leagueAfterSelectHooks []LeagueHook

var leagueBeforeInsertMu sync.Mutex
var leagueBeforeInsertHooks []LeagueHook
var leagueAfterInsertMu sync.Mutex
var leagueAfterInsertHooks []LeagueHook

var leagueBeforeUpdateMu sync.Mutex
var leagueBeforeUpdateHooks []LeagueHook
var leagueAfterUpdateMu sync.Mutex
var leagueAfterUpdateHooks []LeagueHook

var leagueBeforeDeleteMu sync.Mutex
var leagueBeforeDeleteHooks []LeagueHook
var leagueAfterDeleteMu sync.Mutex
var leagueAfterDeleteHooks []LeagueHook

var leagueBeforeUpsertMu sync.Mutex
var leagueBeforeUpsertHooks []LeagueHook
var leagueAfterUpsertMu sync.Mutex
var leagueAfterUpsertHooks []LeagueHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *League) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leagueAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *League) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leagueBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *League) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leagueAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *League) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leagueBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *League) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leagueAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *League) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leagueBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *League) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leagueAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *League) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leagueBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *League) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range leagueAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLeagueHook registers your hook function for all future operations.
func AddLeagueHook(hookPoint boil.HookPoint, leagueHook LeagueHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		leagueAfterSelectMu.Lock()
		leagueAfterSelectHooks = append(leagueAfterSelectHooks, leagueHook)
		leagueAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		leagueBeforeInsertMu.Lock()
		leagueBeforeInsertHooks = append(leagueBeforeInsertHooks, leagueHook)
		leagueBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		leagueAfterInsertMu.Lock()
		leagueAfterInsertHooks = append(leagueAfterInsertHooks, leagueHook)
		leagueAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		leagueBeforeUpdateMu.Lock()
		leagueBeforeUpdateHooks = append(leagueBeforeUpdateHooks, leagueHook)
		leagueBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		leagueAfterUpdateMu.Lock()
		leagueAfterUpdateHooks = append(leagueAfterUpdateHooks, leagueHook)
		leagueAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		leagueBeforeDeleteMu.Lock()
		leagueBeforeDeleteHooks = append(leagueBeforeDeleteHooks, leagueHook)
		leagueBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		leagueAfterDeleteMu.Lock()
		leagueAfterDeleteHooks = append(leagueAfterDeleteHooks, leagueHook)
		leagueAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		leagueBeforeUpsertMu.Lock()
		leagueBeforeUpsertHooks = append(leagueBeforeUpsertHooks, leagueHook)
		leagueBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		leagueAfterUpsertMu.Lock()
		leagueAfterUpsertHooks = append(leagueAfterUpsertHooks, leagueHook)
		leagueAfterUpsertMu.Unlock()
	}
}

// One returns a single league record from the query.
func (q leagueQuery) One(ctx context.Context, exec boil.ContextExecutor) (*League, error) {
	o := &League{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for league")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all League records from the query.
func (q leagueQuery) All(ctx context.Context, exec boil.ContextExecutor) (LeagueSlice, error) {
	var o []*League

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to League slice")
	}

	if len(leagueAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all League records in the query.
func (q leagueQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count league rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q leagueQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if league exists")
	}

	return count > 0, nil
}

// Leagues retrieves all the records using an executor.
func Leagues(mods ...qm.QueryMod) leagueQuery {
	mods = append(mods, qm.From("\"league\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"league\".*"})
	}

	return leagueQuery{q}
}

// FindLeague retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLeague(ctx context.Context, exec boil.ContextExecutor, leagueID string, summonerID string, selectCols ...string) (*League, error) {
	leagueObj := &League{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"league\" where \"league_id\"=$1 AND \"summoner_id\"=$2", sel,
	)

	q := queries.Raw(query, leagueID, summonerID)

	err := q.Bind(ctx, exec, leagueObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from league")
	}

	if err = leagueObj.doAfterSelectHooks(ctx, exec); err != nil {
		return leagueObj, err
	}

	return leagueObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *League) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no league provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(leagueColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	leagueInsertCacheMut.RLock()
	cache, cached := leagueInsertCache[key]
	leagueInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			leagueAllColumns,
			leagueColumnsWithDefault,
			leagueColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(leagueType, leagueMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(leagueType, leagueMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"league\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"league\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into league")
	}

	if !cached {
		leagueInsertCacheMut.Lock()
		leagueInsertCache[key] = cache
		leagueInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the League.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *League) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	leagueUpdateCacheMut.RLock()
	cache, cached := leagueUpdateCache[key]
	leagueUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			leagueAllColumns,
			leaguePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update league, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"league\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, leaguePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(leagueType, leagueMapping, append(wl, leaguePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update league row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for league")
	}

	if !cached {
		leagueUpdateCacheMut.Lock()
		leagueUpdateCache[key] = cache
		leagueUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q leagueQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for league")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for league")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LeagueSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), leaguePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"league\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, leaguePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in league slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all league")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *League) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no league provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(leagueColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	leagueUpsertCacheMut.RLock()
	cache, cached := leagueUpsertCache[key]
	leagueUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			leagueAllColumns,
			leagueColumnsWithDefault,
			leagueColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			leagueAllColumns,
			leaguePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert league, could not build update column list")
		}

		ret := strmangle.SetComplement(leagueAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(leaguePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert league, could not build conflict column list")
			}

			conflict = make([]string, len(leaguePrimaryKeyColumns))
			copy(conflict, leaguePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"league\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(leagueType, leagueMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(leagueType, leagueMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert league")
	}

	if !cached {
		leagueUpsertCacheMut.Lock()
		leagueUpsertCache[key] = cache
		leagueUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single League record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *League) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no League provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), leaguePrimaryKeyMapping)
	sql := "DELETE FROM \"league\" WHERE \"league_id\"=$1 AND \"summoner_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from league")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for league")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q leagueQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no leagueQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from league")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for league")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LeagueSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(leagueBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), leaguePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"league\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, leaguePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from league slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for league")
	}

	if len(leagueAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *League) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLeague(ctx, exec, o.LeagueID, o.SummonerID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LeagueSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LeagueSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), leaguePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"league\".* FROM \"league\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, leaguePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in LeagueSlice")
	}

	*o = slice

	return nil
}

// LeagueExists checks if the League row exists.
func LeagueExists(ctx context.Context, exec boil.ContextExecutor, leagueID string, summonerID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"league\" where \"league_id\"=$1 AND \"summoner_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, leagueID, summonerID)
	}
	row := exec.QueryRowContext(ctx, sql, leagueID, summonerID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if league exists")
	}

	return exists, nil
}

// Exists checks if the League row exists.
func (o *League) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return LeagueExists(ctx, exec, o.LeagueID, o.SummonerID)
}
