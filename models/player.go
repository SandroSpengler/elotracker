// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Player is an object representing the database table.
type Player struct {
	PlayerName string `boil:"player_name" json:"player_name" toml:"player_name" yaml:"player_name"`

	R *playerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L playerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlayerColumns = struct {
	PlayerName string
}{
	PlayerName: "player_name",
}

var PlayerTableColumns = struct {
	PlayerName string
}{
	PlayerName: "player.player_name",
}

// Generated where

var PlayerWhere = struct {
	PlayerName whereHelperstring
}{
	PlayerName: whereHelperstring{field: "\"player\".\"player_name\""},
}

// PlayerRels is where relationship names are stored.
var PlayerRels = struct {
	PlayerNameSocials   string
	PlayerNameSummoners string
}{
	PlayerNameSocials:   "PlayerNameSocials",
	PlayerNameSummoners: "PlayerNameSummoners",
}

// playerR is where relationships are stored.
type playerR struct {
	PlayerNameSocials   SocialSlice   `boil:"PlayerNameSocials" json:"PlayerNameSocials" toml:"PlayerNameSocials" yaml:"PlayerNameSocials"`
	PlayerNameSummoners SummonerSlice `boil:"PlayerNameSummoners" json:"PlayerNameSummoners" toml:"PlayerNameSummoners" yaml:"PlayerNameSummoners"`
}

// NewStruct creates a new relationship struct
func (*playerR) NewStruct() *playerR {
	return &playerR{}
}

func (r *playerR) GetPlayerNameSocials() SocialSlice {
	if r == nil {
		return nil
	}
	return r.PlayerNameSocials
}

func (r *playerR) GetPlayerNameSummoners() SummonerSlice {
	if r == nil {
		return nil
	}
	return r.PlayerNameSummoners
}

// playerL is where Load methods for each relationship are stored.
type playerL struct{}

var (
	playerAllColumns            = []string{"player_name"}
	playerColumnsWithoutDefault = []string{"player_name"}
	playerColumnsWithDefault    = []string{}
	playerPrimaryKeyColumns     = []string{"player_name"}
	playerGeneratedColumns      = []string{}
)

type (
	// PlayerSlice is an alias for a slice of pointers to Player.
	// This should almost always be used instead of []Player.
	PlayerSlice []*Player
	// PlayerHook is the signature for custom Player hook methods
	PlayerHook func(context.Context, boil.ContextExecutor, *Player) error

	playerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	playerType                 = reflect.TypeOf(&Player{})
	playerMapping              = queries.MakeStructMapping(playerType)
	playerPrimaryKeyMapping, _ = queries.BindMapping(playerType, playerMapping, playerPrimaryKeyColumns)
	playerInsertCacheMut       sync.RWMutex
	playerInsertCache          = make(map[string]insertCache)
	playerUpdateCacheMut       sync.RWMutex
	playerUpdateCache          = make(map[string]updateCache)
	playerUpsertCacheMut       sync.RWMutex
	playerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var playerAfterSelectMu sync.Mutex
var playerAfterSelectHooks []PlayerHook

var playerBeforeInsertMu sync.Mutex
var playerBeforeInsertHooks []PlayerHook
var playerAfterInsertMu sync.Mutex
var playerAfterInsertHooks []PlayerHook

var playerBeforeUpdateMu sync.Mutex
var playerBeforeUpdateHooks []PlayerHook
var playerAfterUpdateMu sync.Mutex
var playerAfterUpdateHooks []PlayerHook

var playerBeforeDeleteMu sync.Mutex
var playerBeforeDeleteHooks []PlayerHook
var playerAfterDeleteMu sync.Mutex
var playerAfterDeleteHooks []PlayerHook

var playerBeforeUpsertMu sync.Mutex
var playerBeforeUpsertHooks []PlayerHook
var playerAfterUpsertMu sync.Mutex
var playerAfterUpsertHooks []PlayerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Player) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Player) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Player) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Player) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Player) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Player) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Player) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Player) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Player) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range playerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlayerHook registers your hook function for all future operations.
func AddPlayerHook(hookPoint boil.HookPoint, playerHook PlayerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		playerAfterSelectMu.Lock()
		playerAfterSelectHooks = append(playerAfterSelectHooks, playerHook)
		playerAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		playerBeforeInsertMu.Lock()
		playerBeforeInsertHooks = append(playerBeforeInsertHooks, playerHook)
		playerBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		playerAfterInsertMu.Lock()
		playerAfterInsertHooks = append(playerAfterInsertHooks, playerHook)
		playerAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		playerBeforeUpdateMu.Lock()
		playerBeforeUpdateHooks = append(playerBeforeUpdateHooks, playerHook)
		playerBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		playerAfterUpdateMu.Lock()
		playerAfterUpdateHooks = append(playerAfterUpdateHooks, playerHook)
		playerAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		playerBeforeDeleteMu.Lock()
		playerBeforeDeleteHooks = append(playerBeforeDeleteHooks, playerHook)
		playerBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		playerAfterDeleteMu.Lock()
		playerAfterDeleteHooks = append(playerAfterDeleteHooks, playerHook)
		playerAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		playerBeforeUpsertMu.Lock()
		playerBeforeUpsertHooks = append(playerBeforeUpsertHooks, playerHook)
		playerBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		playerAfterUpsertMu.Lock()
		playerAfterUpsertHooks = append(playerAfterUpsertHooks, playerHook)
		playerAfterUpsertMu.Unlock()
	}
}

// One returns a single player record from the query.
func (q playerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Player, error) {
	o := &Player{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for player")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Player records from the query.
func (q playerQuery) All(ctx context.Context, exec boil.ContextExecutor) (PlayerSlice, error) {
	var o []*Player

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Player slice")
	}

	if len(playerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Player records in the query.
func (q playerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count player rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q playerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if player exists")
	}

	return count > 0, nil
}

// PlayerNameSocials retrieves all the social's Socials with an executor via player_name column.
func (o *Player) PlayerNameSocials(mods ...qm.QueryMod) socialQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"socials\".\"player_name\"=?", o.PlayerName),
	)

	return Socials(queryMods...)
}

// PlayerNameSummoners retrieves all the summoner's Summoners with an executor via player_name column.
func (o *Player) PlayerNameSummoners(mods ...qm.QueryMod) summonerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"summoner\".\"player_name\"=?", o.PlayerName),
	)

	return Summoners(queryMods...)
}

// LoadPlayerNameSocials allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (playerL) LoadPlayerNameSocials(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlayer interface{}, mods queries.Applicator) error {
	var slice []*Player
	var object *Player

	if singular {
		var ok bool
		object, ok = maybePlayer.(*Player)
		if !ok {
			object = new(Player)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlayer))
			}
		}
	} else {
		s, ok := maybePlayer.(*[]*Player)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlayer))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &playerR{}
		}
		args[object.PlayerName] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerR{}
			}
			args[obj.PlayerName] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`socials`),
		qm.WhereIn(`socials.player_name in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load socials")
	}

	var resultSlice []*Social
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice socials")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on socials")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for socials")
	}

	if len(socialAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PlayerNameSocials = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &socialR{}
			}
			foreign.R.PlayerNamePlayer = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.PlayerName == foreign.PlayerName {
				local.R.PlayerNameSocials = append(local.R.PlayerNameSocials, foreign)
				if foreign.R == nil {
					foreign.R = &socialR{}
				}
				foreign.R.PlayerNamePlayer = local
				break
			}
		}
	}

	return nil
}

// LoadPlayerNameSummoners allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (playerL) LoadPlayerNameSummoners(ctx context.Context, e boil.ContextExecutor, singular bool, maybePlayer interface{}, mods queries.Applicator) error {
	var slice []*Player
	var object *Player

	if singular {
		var ok bool
		object, ok = maybePlayer.(*Player)
		if !ok {
			object = new(Player)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePlayer))
			}
		}
	} else {
		s, ok := maybePlayer.(*[]*Player)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePlayer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePlayer))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &playerR{}
		}
		args[object.PlayerName] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerR{}
			}
			args[obj.PlayerName] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`summoner`),
		qm.WhereIn(`summoner.player_name in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load summoner")
	}

	var resultSlice []*Summoner
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice summoner")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on summoner")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for summoner")
	}

	if len(summonerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PlayerNameSummoners = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &summonerR{}
			}
			foreign.R.PlayerNamePlayer = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.PlayerName, foreign.PlayerName) {
				local.R.PlayerNameSummoners = append(local.R.PlayerNameSummoners, foreign)
				if foreign.R == nil {
					foreign.R = &summonerR{}
				}
				foreign.R.PlayerNamePlayer = local
				break
			}
		}
	}

	return nil
}

// AddPlayerNameSocials adds the given related objects to the existing relationships
// of the player, optionally inserting them as new records.
// Appends related to o.R.PlayerNameSocials.
// Sets related.R.PlayerNamePlayer appropriately.
func (o *Player) AddPlayerNameSocials(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Social) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PlayerName = o.PlayerName
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"socials\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"player_name"}),
				strmangle.WhereClause("\"", "\"", 2, socialPrimaryKeyColumns),
			)
			values := []interface{}{o.PlayerName, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PlayerName = o.PlayerName
		}
	}

	if o.R == nil {
		o.R = &playerR{
			PlayerNameSocials: related,
		}
	} else {
		o.R.PlayerNameSocials = append(o.R.PlayerNameSocials, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &socialR{
				PlayerNamePlayer: o,
			}
		} else {
			rel.R.PlayerNamePlayer = o
		}
	}
	return nil
}

// AddPlayerNameSummoners adds the given related objects to the existing relationships
// of the player, optionally inserting them as new records.
// Appends related to o.R.PlayerNameSummoners.
// Sets related.R.PlayerNamePlayer appropriately.
func (o *Player) AddPlayerNameSummoners(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Summoner) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.PlayerName, o.PlayerName)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"summoner\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"player_name"}),
				strmangle.WhereClause("\"", "\"", 2, summonerPrimaryKeyColumns),
			)
			values := []interface{}{o.PlayerName, rel.Puuid}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.PlayerName, o.PlayerName)
		}
	}

	if o.R == nil {
		o.R = &playerR{
			PlayerNameSummoners: related,
		}
	} else {
		o.R.PlayerNameSummoners = append(o.R.PlayerNameSummoners, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &summonerR{
				PlayerNamePlayer: o,
			}
		} else {
			rel.R.PlayerNamePlayer = o
		}
	}
	return nil
}

// SetPlayerNameSummoners removes all previously related items of the
// player replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.PlayerNamePlayer's PlayerNameSummoners accordingly.
// Replaces o.R.PlayerNameSummoners with related.
// Sets related.R.PlayerNamePlayer's PlayerNameSummoners accordingly.
func (o *Player) SetPlayerNameSummoners(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Summoner) error {
	query := "update \"summoner\" set \"player_name\" = null where \"player_name\" = $1"
	values := []interface{}{o.PlayerName}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.PlayerNameSummoners {
			queries.SetScanner(&rel.PlayerName, nil)
			if rel.R == nil {
				continue
			}

			rel.R.PlayerNamePlayer = nil
		}
		o.R.PlayerNameSummoners = nil
	}

	return o.AddPlayerNameSummoners(ctx, exec, insert, related...)
}

// RemovePlayerNameSummoners relationships from objects passed in.
// Removes related items from R.PlayerNameSummoners (uses pointer comparison, removal does not keep order)
// Sets related.R.PlayerNamePlayer.
func (o *Player) RemovePlayerNameSummoners(ctx context.Context, exec boil.ContextExecutor, related ...*Summoner) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.PlayerName, nil)
		if rel.R != nil {
			rel.R.PlayerNamePlayer = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("player_name")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.PlayerNameSummoners {
			if rel != ri {
				continue
			}

			ln := len(o.R.PlayerNameSummoners)
			if ln > 1 && i < ln-1 {
				o.R.PlayerNameSummoners[i] = o.R.PlayerNameSummoners[ln-1]
			}
			o.R.PlayerNameSummoners = o.R.PlayerNameSummoners[:ln-1]
			break
		}
	}

	return nil
}

// Players retrieves all the records using an executor.
func Players(mods ...qm.QueryMod) playerQuery {
	mods = append(mods, qm.From("\"player\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"player\".*"})
	}

	return playerQuery{q}
}

// FindPlayer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlayer(ctx context.Context, exec boil.ContextExecutor, playerName string, selectCols ...string) (*Player, error) {
	playerObj := &Player{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"player\" where \"player_name\"=$1", sel,
	)

	q := queries.Raw(query, playerName)

	err := q.Bind(ctx, exec, playerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from player")
	}

	if err = playerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return playerObj, err
	}

	return playerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Player) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no player provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	playerInsertCacheMut.RLock()
	cache, cached := playerInsertCache[key]
	playerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			playerAllColumns,
			playerColumnsWithDefault,
			playerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(playerType, playerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(playerType, playerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"player\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"player\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into player")
	}

	if !cached {
		playerInsertCacheMut.Lock()
		playerInsertCache[key] = cache
		playerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Player.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Player) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	playerUpdateCacheMut.RLock()
	cache, cached := playerUpdateCache[key]
	playerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			playerAllColumns,
			playerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update player, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"player\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, playerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(playerType, playerMapping, append(wl, playerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update player row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for player")
	}

	if !cached {
		playerUpdateCacheMut.Lock()
		playerUpdateCache[key] = cache
		playerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q playerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for player")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for player")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlayerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"player\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, playerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in player slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all player")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Player) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no player provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	playerUpsertCacheMut.RLock()
	cache, cached := playerUpsertCache[key]
	playerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			playerAllColumns,
			playerColumnsWithDefault,
			playerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			playerAllColumns,
			playerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert player, could not build update column list")
		}

		ret := strmangle.SetComplement(playerAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(playerPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert player, could not build conflict column list")
			}

			conflict = make([]string, len(playerPrimaryKeyColumns))
			copy(conflict, playerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"player\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(playerType, playerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(playerType, playerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert player")
	}

	if !cached {
		playerUpsertCacheMut.Lock()
		playerUpsertCache[key] = cache
		playerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Player record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Player) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Player provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), playerPrimaryKeyMapping)
	sql := "DELETE FROM \"player\" WHERE \"player_name\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from player")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for player")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q playerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no playerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from player")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for player")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlayerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(playerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"player\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from player slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for player")
	}

	if len(playerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Player) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPlayer(ctx, exec, o.PlayerName)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlayerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlayerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"player\".* FROM \"player\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PlayerSlice")
	}

	*o = slice

	return nil
}

// PlayerExists checks if the Player row exists.
func PlayerExists(ctx context.Context, exec boil.ContextExecutor, playerName string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"player\" where \"player_name\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, playerName)
	}
	row := exec.QueryRowContext(ctx, sql, playerName)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if player exists")
	}

	return exists, nil
}

// Exists checks if the Player row exists.
func (o *Player) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PlayerExists(ctx, exec, o.PlayerName)
}
