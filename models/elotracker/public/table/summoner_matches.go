//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SummonerMatches = newSummonerMatchesTable("public", "summoner_matches", "")

type summonerMatchesTable struct {
	postgres.Table

	// Columns
	Puuid                     postgres.ColumnString
	MatchID                   postgres.ColumnString
	GameMode                  postgres.ColumnString
	GameType                  postgres.ColumnString
	QueueID                   postgres.ColumnString
	Kills                     postgres.ColumnInteger
	Assists                   postgres.ColumnInteger
	Deaths                    postgres.ColumnInteger
	Kda                       postgres.ColumnFloat
	KillParticipation         postgres.ColumnFloat
	Processed                 postgres.ColumnBool
	GameStartTime             postgres.ColumnTimestamp
	GameEndTime               postgres.ColumnTimestamp
	GameEndedInEarlySurrender postgres.ColumnBool
	Win                       postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SummonerMatchesTable struct {
	summonerMatchesTable

	EXCLUDED summonerMatchesTable
}

// AS creates new SummonerMatchesTable with assigned alias
func (a SummonerMatchesTable) AS(alias string) *SummonerMatchesTable {
	return newSummonerMatchesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SummonerMatchesTable with assigned schema name
func (a SummonerMatchesTable) FromSchema(schemaName string) *SummonerMatchesTable {
	return newSummonerMatchesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SummonerMatchesTable with assigned table prefix
func (a SummonerMatchesTable) WithPrefix(prefix string) *SummonerMatchesTable {
	return newSummonerMatchesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SummonerMatchesTable with assigned table suffix
func (a SummonerMatchesTable) WithSuffix(suffix string) *SummonerMatchesTable {
	return newSummonerMatchesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSummonerMatchesTable(schemaName, tableName, alias string) *SummonerMatchesTable {
	return &SummonerMatchesTable{
		summonerMatchesTable: newSummonerMatchesTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newSummonerMatchesTableImpl("", "excluded", ""),
	}
}

func newSummonerMatchesTableImpl(schemaName, tableName, alias string) summonerMatchesTable {
	var (
		PuuidColumn                     = postgres.StringColumn("puuid")
		MatchIDColumn                   = postgres.StringColumn("match_id")
		GameModeColumn                  = postgres.StringColumn("game_mode")
		GameTypeColumn                  = postgres.StringColumn("game_type")
		QueueIDColumn                   = postgres.StringColumn("queue_id")
		KillsColumn                     = postgres.IntegerColumn("kills")
		AssistsColumn                   = postgres.IntegerColumn("assists")
		DeathsColumn                    = postgres.IntegerColumn("deaths")
		KdaColumn                       = postgres.FloatColumn("kda")
		KillParticipationColumn         = postgres.FloatColumn("kill_participation")
		ProcessedColumn                 = postgres.BoolColumn("processed")
		GameStartTimeColumn             = postgres.TimestampColumn("game_start_time")
		GameEndTimeColumn               = postgres.TimestampColumn("game_end_time")
		GameEndedInEarlySurrenderColumn = postgres.BoolColumn("game_ended_in_early_surrender")
		WinColumn                       = postgres.BoolColumn("win")
		allColumns                      = postgres.ColumnList{PuuidColumn, MatchIDColumn, GameModeColumn, GameTypeColumn, QueueIDColumn, KillsColumn, AssistsColumn, DeathsColumn, KdaColumn, KillParticipationColumn, ProcessedColumn, GameStartTimeColumn, GameEndTimeColumn, GameEndedInEarlySurrenderColumn, WinColumn}
		mutableColumns                  = postgres.ColumnList{GameModeColumn, GameTypeColumn, QueueIDColumn, KillsColumn, AssistsColumn, DeathsColumn, KdaColumn, KillParticipationColumn, ProcessedColumn, GameStartTimeColumn, GameEndTimeColumn, GameEndedInEarlySurrenderColumn, WinColumn}
	)

	return summonerMatchesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Puuid:                     PuuidColumn,
		MatchID:                   MatchIDColumn,
		GameMode:                  GameModeColumn,
		GameType:                  GameTypeColumn,
		QueueID:                   QueueIDColumn,
		Kills:                     KillsColumn,
		Assists:                   AssistsColumn,
		Deaths:                    DeathsColumn,
		Kda:                       KdaColumn,
		KillParticipation:         KillParticipationColumn,
		Processed:                 ProcessedColumn,
		GameStartTime:             GameStartTimeColumn,
		GameEndTime:               GameEndTimeColumn,
		GameEndedInEarlySurrender: GameEndedInEarlySurrenderColumn,
		Win:                       WinColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
