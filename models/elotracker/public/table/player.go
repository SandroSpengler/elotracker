//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Player = newPlayerTable("public", "player", "")

type playerTable struct {
	postgres.Table

	// Columns
	PlayerName postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PlayerTable struct {
	playerTable

	EXCLUDED playerTable
}

// AS creates new PlayerTable with assigned alias
func (a PlayerTable) AS(alias string) *PlayerTable {
	return newPlayerTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PlayerTable with assigned schema name
func (a PlayerTable) FromSchema(schemaName string) *PlayerTable {
	return newPlayerTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PlayerTable with assigned table prefix
func (a PlayerTable) WithPrefix(prefix string) *PlayerTable {
	return newPlayerTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PlayerTable with assigned table suffix
func (a PlayerTable) WithSuffix(suffix string) *PlayerTable {
	return newPlayerTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPlayerTable(schemaName, tableName, alias string) *PlayerTable {
	return &PlayerTable{
		playerTable: newPlayerTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newPlayerTableImpl("", "excluded", ""),
	}
}

func newPlayerTableImpl(schemaName, tableName, alias string) playerTable {
	var (
		PlayerNameColumn = postgres.StringColumn("player_name")
		allColumns       = postgres.ColumnList{PlayerNameColumn}
		mutableColumns   = postgres.ColumnList{}
	)

	return playerTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		PlayerName: PlayerNameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
