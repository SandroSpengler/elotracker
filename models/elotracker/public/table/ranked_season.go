//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var RankedSeason = newRankedSeasonTable("public", "ranked_season", "")

type rankedSeasonTable struct {
	postgres.Table

	// Columns
	Rid               postgres.ColumnInteger
	RankedSeasonID    postgres.ColumnInteger
	TotalRankedSplits postgres.ColumnInteger
	SplitID           postgres.ColumnInteger
	StartDate         postgres.ColumnTimestamp
	EndDate           postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RankedSeasonTable struct {
	rankedSeasonTable

	EXCLUDED rankedSeasonTable
}

// AS creates new RankedSeasonTable with assigned alias
func (a RankedSeasonTable) AS(alias string) *RankedSeasonTable {
	return newRankedSeasonTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RankedSeasonTable with assigned schema name
func (a RankedSeasonTable) FromSchema(schemaName string) *RankedSeasonTable {
	return newRankedSeasonTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RankedSeasonTable with assigned table prefix
func (a RankedSeasonTable) WithPrefix(prefix string) *RankedSeasonTable {
	return newRankedSeasonTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RankedSeasonTable with assigned table suffix
func (a RankedSeasonTable) WithSuffix(suffix string) *RankedSeasonTable {
	return newRankedSeasonTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRankedSeasonTable(schemaName, tableName, alias string) *RankedSeasonTable {
	return &RankedSeasonTable{
		rankedSeasonTable: newRankedSeasonTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newRankedSeasonTableImpl("", "excluded", ""),
	}
}

func newRankedSeasonTableImpl(schemaName, tableName, alias string) rankedSeasonTable {
	var (
		RidColumn               = postgres.IntegerColumn("rid")
		RankedSeasonIDColumn    = postgres.IntegerColumn("ranked_season_id")
		TotalRankedSplitsColumn = postgres.IntegerColumn("total_ranked_splits")
		SplitIDColumn           = postgres.IntegerColumn("split_id")
		StartDateColumn         = postgres.TimestampColumn("start_date")
		EndDateColumn           = postgres.TimestampColumn("end_date")
		allColumns              = postgres.ColumnList{RidColumn, RankedSeasonIDColumn, TotalRankedSplitsColumn, SplitIDColumn, StartDateColumn, EndDateColumn}
		mutableColumns          = postgres.ColumnList{RankedSeasonIDColumn, TotalRankedSplitsColumn, SplitIDColumn, StartDateColumn, EndDateColumn}
	)

	return rankedSeasonTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Rid:               RidColumn,
		RankedSeasonID:    RankedSeasonIDColumn,
		TotalRankedSplits: TotalRankedSplitsColumn,
		SplitID:           SplitIDColumn,
		StartDate:         StartDateColumn,
		EndDate:           EndDateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
