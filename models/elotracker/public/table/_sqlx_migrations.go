//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SqlxMigrations = newSqlxMigrationsTable("public", "_sqlx_migrations", "")

type sqlxMigrationsTable struct {
	postgres.Table

	// Columns
	Version       postgres.ColumnInteger
	Description   postgres.ColumnString
	InstalledOn   postgres.ColumnTimestampz
	Success       postgres.ColumnBool
	Checksum      postgres.ColumnString
	ExecutionTime postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SqlxMigrationsTable struct {
	sqlxMigrationsTable

	EXCLUDED sqlxMigrationsTable
}

// AS creates new SqlxMigrationsTable with assigned alias
func (a SqlxMigrationsTable) AS(alias string) *SqlxMigrationsTable {
	return newSqlxMigrationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SqlxMigrationsTable with assigned schema name
func (a SqlxMigrationsTable) FromSchema(schemaName string) *SqlxMigrationsTable {
	return newSqlxMigrationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SqlxMigrationsTable with assigned table prefix
func (a SqlxMigrationsTable) WithPrefix(prefix string) *SqlxMigrationsTable {
	return newSqlxMigrationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SqlxMigrationsTable with assigned table suffix
func (a SqlxMigrationsTable) WithSuffix(suffix string) *SqlxMigrationsTable {
	return newSqlxMigrationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSqlxMigrationsTable(schemaName, tableName, alias string) *SqlxMigrationsTable {
	return &SqlxMigrationsTable{
		sqlxMigrationsTable: newSqlxMigrationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newSqlxMigrationsTableImpl("", "excluded", ""),
	}
}

func newSqlxMigrationsTableImpl(schemaName, tableName, alias string) sqlxMigrationsTable {
	var (
		VersionColumn       = postgres.IntegerColumn("version")
		DescriptionColumn   = postgres.StringColumn("description")
		InstalledOnColumn   = postgres.TimestampzColumn("installed_on")
		SuccessColumn       = postgres.BoolColumn("success")
		ChecksumColumn      = postgres.StringColumn("checksum")
		ExecutionTimeColumn = postgres.IntegerColumn("execution_time")
		allColumns          = postgres.ColumnList{VersionColumn, DescriptionColumn, InstalledOnColumn, SuccessColumn, ChecksumColumn, ExecutionTimeColumn}
		mutableColumns      = postgres.ColumnList{DescriptionColumn, InstalledOnColumn, SuccessColumn, ChecksumColumn, ExecutionTimeColumn}
	)

	return sqlxMigrationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Version:       VersionColumn,
		Description:   DescriptionColumn,
		InstalledOn:   InstalledOnColumn,
		Success:       SuccessColumn,
		Checksum:      ChecksumColumn,
		ExecutionTime: ExecutionTimeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
