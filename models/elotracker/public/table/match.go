//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Match = newMatchTable("public", "match", "")

type matchTable struct {
	postgres.Table

	// Columns
	MatchID   postgres.ColumnString
	MatchData postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MatchTable struct {
	matchTable

	EXCLUDED matchTable
}

// AS creates new MatchTable with assigned alias
func (a MatchTable) AS(alias string) *MatchTable {
	return newMatchTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MatchTable with assigned schema name
func (a MatchTable) FromSchema(schemaName string) *MatchTable {
	return newMatchTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MatchTable with assigned table prefix
func (a MatchTable) WithPrefix(prefix string) *MatchTable {
	return newMatchTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MatchTable with assigned table suffix
func (a MatchTable) WithSuffix(suffix string) *MatchTable {
	return newMatchTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMatchTable(schemaName, tableName, alias string) *MatchTable {
	return &MatchTable{
		matchTable: newMatchTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newMatchTableImpl("", "excluded", ""),
	}
}

func newMatchTableImpl(schemaName, tableName, alias string) matchTable {
	var (
		MatchIDColumn   = postgres.StringColumn("match_id")
		MatchDataColumn = postgres.StringColumn("match_data")
		allColumns      = postgres.ColumnList{MatchIDColumn, MatchDataColumn}
		mutableColumns  = postgres.ColumnList{MatchDataColumn}
	)

	return matchTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		MatchID:   MatchIDColumn,
		MatchData: MatchDataColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
