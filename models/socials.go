// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Social is an object representing the database table.
type Social struct {
	ID            int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	PlayerName    string      `boil:"player_name" json:"player_name" toml:"player_name" yaml:"player_name"`
	DiscordLink   null.String `boil:"discord_link" json:"discord_link,omitempty" toml:"discord_link" yaml:"discord_link,omitempty"`
	InstagramLink null.String `boil:"instagram_link" json:"instagram_link,omitempty" toml:"instagram_link" yaml:"instagram_link,omitempty"`
	TiktokLink    null.String `boil:"tiktok_link" json:"tiktok_link,omitempty" toml:"tiktok_link" yaml:"tiktok_link,omitempty"`
	TwitterLink   null.String `boil:"twitter_link" json:"twitter_link,omitempty" toml:"twitter_link" yaml:"twitter_link,omitempty"`
	TwitchLink    null.String `boil:"twitch_link" json:"twitch_link,omitempty" toml:"twitch_link" yaml:"twitch_link,omitempty"`
	YoutubeLink   null.String `boil:"youtube_link" json:"youtube_link,omitempty" toml:"youtube_link" yaml:"youtube_link,omitempty"`

	R *socialR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L socialL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SocialColumns = struct {
	ID            string
	PlayerName    string
	DiscordLink   string
	InstagramLink string
	TiktokLink    string
	TwitterLink   string
	TwitchLink    string
	YoutubeLink   string
}{
	ID:            "id",
	PlayerName:    "player_name",
	DiscordLink:   "discord_link",
	InstagramLink: "instagram_link",
	TiktokLink:    "tiktok_link",
	TwitterLink:   "twitter_link",
	TwitchLink:    "twitch_link",
	YoutubeLink:   "youtube_link",
}

var SocialTableColumns = struct {
	ID            string
	PlayerName    string
	DiscordLink   string
	InstagramLink string
	TiktokLink    string
	TwitterLink   string
	TwitchLink    string
	YoutubeLink   string
}{
	ID:            "socials.id",
	PlayerName:    "socials.player_name",
	DiscordLink:   "socials.discord_link",
	InstagramLink: "socials.instagram_link",
	TiktokLink:    "socials.tiktok_link",
	TwitterLink:   "socials.twitter_link",
	TwitchLink:    "socials.twitch_link",
	YoutubeLink:   "socials.youtube_link",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var SocialWhere = struct {
	ID            whereHelperint
	PlayerName    whereHelperstring
	DiscordLink   whereHelpernull_String
	InstagramLink whereHelpernull_String
	TiktokLink    whereHelpernull_String
	TwitterLink   whereHelpernull_String
	TwitchLink    whereHelpernull_String
	YoutubeLink   whereHelpernull_String
}{
	ID:            whereHelperint{field: "\"socials\".\"id\""},
	PlayerName:    whereHelperstring{field: "\"socials\".\"player_name\""},
	DiscordLink:   whereHelpernull_String{field: "\"socials\".\"discord_link\""},
	InstagramLink: whereHelpernull_String{field: "\"socials\".\"instagram_link\""},
	TiktokLink:    whereHelpernull_String{field: "\"socials\".\"tiktok_link\""},
	TwitterLink:   whereHelpernull_String{field: "\"socials\".\"twitter_link\""},
	TwitchLink:    whereHelpernull_String{field: "\"socials\".\"twitch_link\""},
	YoutubeLink:   whereHelpernull_String{field: "\"socials\".\"youtube_link\""},
}

// SocialRels is where relationship names are stored.
var SocialRels = struct {
	PlayerNamePlayer string
}{
	PlayerNamePlayer: "PlayerNamePlayer",
}

// socialR is where relationships are stored.
type socialR struct {
	PlayerNamePlayer *Player `boil:"PlayerNamePlayer" json:"PlayerNamePlayer" toml:"PlayerNamePlayer" yaml:"PlayerNamePlayer"`
}

// NewStruct creates a new relationship struct
func (*socialR) NewStruct() *socialR {
	return &socialR{}
}

func (r *socialR) GetPlayerNamePlayer() *Player {
	if r == nil {
		return nil
	}
	return r.PlayerNamePlayer
}

// socialL is where Load methods for each relationship are stored.
type socialL struct{}

var (
	socialAllColumns            = []string{"id", "player_name", "discord_link", "instagram_link", "tiktok_link", "twitter_link", "twitch_link", "youtube_link"}
	socialColumnsWithoutDefault = []string{"player_name"}
	socialColumnsWithDefault    = []string{"id", "discord_link", "instagram_link", "tiktok_link", "twitter_link", "twitch_link", "youtube_link"}
	socialPrimaryKeyColumns     = []string{"id"}
	socialGeneratedColumns      = []string{}
)

type (
	// SocialSlice is an alias for a slice of pointers to Social.
	// This should almost always be used instead of []Social.
	SocialSlice []*Social
	// SocialHook is the signature for custom Social hook methods
	SocialHook func(context.Context, boil.ContextExecutor, *Social) error

	socialQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	socialType                 = reflect.TypeOf(&Social{})
	socialMapping              = queries.MakeStructMapping(socialType)
	socialPrimaryKeyMapping, _ = queries.BindMapping(socialType, socialMapping, socialPrimaryKeyColumns)
	socialInsertCacheMut       sync.RWMutex
	socialInsertCache          = make(map[string]insertCache)
	socialUpdateCacheMut       sync.RWMutex
	socialUpdateCache          = make(map[string]updateCache)
	socialUpsertCacheMut       sync.RWMutex
	socialUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var socialAfterSelectMu sync.Mutex
var socialAfterSelectHooks []SocialHook

var socialBeforeInsertMu sync.Mutex
var socialBeforeInsertHooks []SocialHook
var socialAfterInsertMu sync.Mutex
var socialAfterInsertHooks []SocialHook

var socialBeforeUpdateMu sync.Mutex
var socialBeforeUpdateHooks []SocialHook
var socialAfterUpdateMu sync.Mutex
var socialAfterUpdateHooks []SocialHook

var socialBeforeDeleteMu sync.Mutex
var socialBeforeDeleteHooks []SocialHook
var socialAfterDeleteMu sync.Mutex
var socialAfterDeleteHooks []SocialHook

var socialBeforeUpsertMu sync.Mutex
var socialBeforeUpsertHooks []SocialHook
var socialAfterUpsertMu sync.Mutex
var socialAfterUpsertHooks []SocialHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Social) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Social) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Social) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Social) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Social) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Social) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Social) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Social) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Social) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range socialAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSocialHook registers your hook function for all future operations.
func AddSocialHook(hookPoint boil.HookPoint, socialHook SocialHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		socialAfterSelectMu.Lock()
		socialAfterSelectHooks = append(socialAfterSelectHooks, socialHook)
		socialAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		socialBeforeInsertMu.Lock()
		socialBeforeInsertHooks = append(socialBeforeInsertHooks, socialHook)
		socialBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		socialAfterInsertMu.Lock()
		socialAfterInsertHooks = append(socialAfterInsertHooks, socialHook)
		socialAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		socialBeforeUpdateMu.Lock()
		socialBeforeUpdateHooks = append(socialBeforeUpdateHooks, socialHook)
		socialBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		socialAfterUpdateMu.Lock()
		socialAfterUpdateHooks = append(socialAfterUpdateHooks, socialHook)
		socialAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		socialBeforeDeleteMu.Lock()
		socialBeforeDeleteHooks = append(socialBeforeDeleteHooks, socialHook)
		socialBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		socialAfterDeleteMu.Lock()
		socialAfterDeleteHooks = append(socialAfterDeleteHooks, socialHook)
		socialAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		socialBeforeUpsertMu.Lock()
		socialBeforeUpsertHooks = append(socialBeforeUpsertHooks, socialHook)
		socialBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		socialAfterUpsertMu.Lock()
		socialAfterUpsertHooks = append(socialAfterUpsertHooks, socialHook)
		socialAfterUpsertMu.Unlock()
	}
}

// One returns a single social record from the query.
func (q socialQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Social, error) {
	o := &Social{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for socials")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Social records from the query.
func (q socialQuery) All(ctx context.Context, exec boil.ContextExecutor) (SocialSlice, error) {
	var o []*Social

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Social slice")
	}

	if len(socialAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Social records in the query.
func (q socialQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count socials rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q socialQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if socials exists")
	}

	return count > 0, nil
}

// PlayerNamePlayer pointed to by the foreign key.
func (o *Social) PlayerNamePlayer(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"player_name\" = ?", o.PlayerName),
	}

	queryMods = append(queryMods, mods...)

	return Players(queryMods...)
}

// LoadPlayerNamePlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (socialL) LoadPlayerNamePlayer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSocial interface{}, mods queries.Applicator) error {
	var slice []*Social
	var object *Social

	if singular {
		var ok bool
		object, ok = maybeSocial.(*Social)
		if !ok {
			object = new(Social)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSocial)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSocial))
			}
		}
	} else {
		s, ok := maybeSocial.(*[]*Social)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSocial)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSocial))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &socialR{}
		}
		args[object.PlayerName] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &socialR{}
			}

			args[obj.PlayerName] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`player`),
		qm.WhereIn(`player.player_name in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for player")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for player")
	}

	if len(playerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.PlayerNamePlayer = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.PlayerNameSocials = append(foreign.R.PlayerNameSocials, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PlayerName == foreign.PlayerName {
				local.R.PlayerNamePlayer = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.PlayerNameSocials = append(foreign.R.PlayerNameSocials, local)
				break
			}
		}
	}

	return nil
}

// SetPlayerNamePlayer of the social to the related item.
// Sets o.R.PlayerNamePlayer to related.
// Adds o to related.R.PlayerNameSocials.
func (o *Social) SetPlayerNamePlayer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"socials\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_name"}),
		strmangle.WhereClause("\"", "\"", 2, socialPrimaryKeyColumns),
	)
	values := []interface{}{related.PlayerName, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PlayerName = related.PlayerName
	if o.R == nil {
		o.R = &socialR{
			PlayerNamePlayer: related,
		}
	} else {
		o.R.PlayerNamePlayer = related
	}

	if related.R == nil {
		related.R = &playerR{
			PlayerNameSocials: SocialSlice{o},
		}
	} else {
		related.R.PlayerNameSocials = append(related.R.PlayerNameSocials, o)
	}

	return nil
}

// Socials retrieves all the records using an executor.
func Socials(mods ...qm.QueryMod) socialQuery {
	mods = append(mods, qm.From("\"socials\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"socials\".*"})
	}

	return socialQuery{q}
}

// FindSocial retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSocial(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Social, error) {
	socialObj := &Social{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"socials\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, socialObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from socials")
	}

	if err = socialObj.doAfterSelectHooks(ctx, exec); err != nil {
		return socialObj, err
	}

	return socialObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Social) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no socials provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(socialColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	socialInsertCacheMut.RLock()
	cache, cached := socialInsertCache[key]
	socialInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			socialAllColumns,
			socialColumnsWithDefault,
			socialColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(socialType, socialMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(socialType, socialMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"socials\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"socials\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into socials")
	}

	if !cached {
		socialInsertCacheMut.Lock()
		socialInsertCache[key] = cache
		socialInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Social.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Social) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	socialUpdateCacheMut.RLock()
	cache, cached := socialUpdateCache[key]
	socialUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			socialAllColumns,
			socialPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update socials, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"socials\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, socialPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(socialType, socialMapping, append(wl, socialPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update socials row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for socials")
	}

	if !cached {
		socialUpdateCacheMut.Lock()
		socialUpdateCache[key] = cache
		socialUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q socialQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for socials")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for socials")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SocialSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), socialPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"socials\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, socialPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in social slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all social")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Social) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no socials provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(socialColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	socialUpsertCacheMut.RLock()
	cache, cached := socialUpsertCache[key]
	socialUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			socialAllColumns,
			socialColumnsWithDefault,
			socialColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			socialAllColumns,
			socialPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert socials, could not build update column list")
		}

		ret := strmangle.SetComplement(socialAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(socialPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert socials, could not build conflict column list")
			}

			conflict = make([]string, len(socialPrimaryKeyColumns))
			copy(conflict, socialPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"socials\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(socialType, socialMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(socialType, socialMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert socials")
	}

	if !cached {
		socialUpsertCacheMut.Lock()
		socialUpsertCache[key] = cache
		socialUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Social record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Social) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Social provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), socialPrimaryKeyMapping)
	sql := "DELETE FROM \"socials\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from socials")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for socials")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q socialQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no socialQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from socials")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for socials")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SocialSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(socialBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), socialPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"socials\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, socialPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from social slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for socials")
	}

	if len(socialAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Social) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSocial(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SocialSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SocialSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), socialPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"socials\".* FROM \"socials\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, socialPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SocialSlice")
	}

	*o = slice

	return nil
}

// SocialExists checks if the Social row exists.
func SocialExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"socials\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if socials exists")
	}

	return exists, nil
}

// Exists checks if the Social row exists.
func (o *Social) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SocialExists(ctx, exec, o.ID)
}
