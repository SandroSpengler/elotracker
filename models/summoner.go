// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Summoner is an object representing the database table.
type Summoner struct {
	Puuid              string      `boil:"puuid" json:"puuid" toml:"puuid" yaml:"puuid"`
	GameName           string      `boil:"game_name" json:"game_name" toml:"game_name" yaml:"game_name"`
	TagLine            string      `boil:"tag_line" json:"tag_line" toml:"tag_line" yaml:"tag_line"`
	LastMatchUpdate    null.Time   `boil:"last_match_update" json:"last_match_update,omitempty" toml:"last_match_update" yaml:"last_match_update,omitempty"`
	LastSummonerUpdate null.Time   `boil:"last_summoner_update" json:"last_summoner_update,omitempty" toml:"last_summoner_update" yaml:"last_summoner_update,omitempty"`
	ID                 null.String `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	AccountID          null.String `boil:"account_id" json:"account_id,omitempty" toml:"account_id" yaml:"account_id,omitempty"`
	ProfileIconID      null.Int    `boil:"profile_icon_id" json:"profile_icon_id,omitempty" toml:"profile_icon_id" yaml:"profile_icon_id,omitempty"`
	SummonerLevel      null.Int64  `boil:"summoner_level" json:"summoner_level,omitempty" toml:"summoner_level" yaml:"summoner_level,omitempty"`
	RevisionDate       null.Time   `boil:"revision_date" json:"revision_date,omitempty" toml:"revision_date" yaml:"revision_date,omitempty"`
	PlayerName         null.String `boil:"player_name" json:"player_name,omitempty" toml:"player_name" yaml:"player_name,omitempty"`

	R *summonerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L summonerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SummonerColumns = struct {
	Puuid              string
	GameName           string
	TagLine            string
	LastMatchUpdate    string
	LastSummonerUpdate string
	ID                 string
	AccountID          string
	ProfileIconID      string
	SummonerLevel      string
	RevisionDate       string
	PlayerName         string
}{
	Puuid:              "puuid",
	GameName:           "game_name",
	TagLine:            "tag_line",
	LastMatchUpdate:    "last_match_update",
	LastSummonerUpdate: "last_summoner_update",
	ID:                 "id",
	AccountID:          "account_id",
	ProfileIconID:      "profile_icon_id",
	SummonerLevel:      "summoner_level",
	RevisionDate:       "revision_date",
	PlayerName:         "player_name",
}

var SummonerTableColumns = struct {
	Puuid              string
	GameName           string
	TagLine            string
	LastMatchUpdate    string
	LastSummonerUpdate string
	ID                 string
	AccountID          string
	ProfileIconID      string
	SummonerLevel      string
	RevisionDate       string
	PlayerName         string
}{
	Puuid:              "summoner.puuid",
	GameName:           "summoner.game_name",
	TagLine:            "summoner.tag_line",
	LastMatchUpdate:    "summoner.last_match_update",
	LastSummonerUpdate: "summoner.last_summoner_update",
	ID:                 "summoner.id",
	AccountID:          "summoner.account_id",
	ProfileIconID:      "summoner.profile_icon_id",
	SummonerLevel:      "summoner.summoner_level",
	RevisionDate:       "summoner.revision_date",
	PlayerName:         "summoner.player_name",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var SummonerWhere = struct {
	Puuid              whereHelperstring
	GameName           whereHelperstring
	TagLine            whereHelperstring
	LastMatchUpdate    whereHelpernull_Time
	LastSummonerUpdate whereHelpernull_Time
	ID                 whereHelpernull_String
	AccountID          whereHelpernull_String
	ProfileIconID      whereHelpernull_Int
	SummonerLevel      whereHelpernull_Int64
	RevisionDate       whereHelpernull_Time
	PlayerName         whereHelpernull_String
}{
	Puuid:              whereHelperstring{field: "\"summoner\".\"puuid\""},
	GameName:           whereHelperstring{field: "\"summoner\".\"game_name\""},
	TagLine:            whereHelperstring{field: "\"summoner\".\"tag_line\""},
	LastMatchUpdate:    whereHelpernull_Time{field: "\"summoner\".\"last_match_update\""},
	LastSummonerUpdate: whereHelpernull_Time{field: "\"summoner\".\"last_summoner_update\""},
	ID:                 whereHelpernull_String{field: "\"summoner\".\"id\""},
	AccountID:          whereHelpernull_String{field: "\"summoner\".\"account_id\""},
	ProfileIconID:      whereHelpernull_Int{field: "\"summoner\".\"profile_icon_id\""},
	SummonerLevel:      whereHelpernull_Int64{field: "\"summoner\".\"summoner_level\""},
	RevisionDate:       whereHelpernull_Time{field: "\"summoner\".\"revision_date\""},
	PlayerName:         whereHelpernull_String{field: "\"summoner\".\"player_name\""},
}

// SummonerRels is where relationship names are stored.
var SummonerRels = struct {
}{}

// summonerR is where relationships are stored.
type summonerR struct {
}

// NewStruct creates a new relationship struct
func (*summonerR) NewStruct() *summonerR {
	return &summonerR{}
}

// summonerL is where Load methods for each relationship are stored.
type summonerL struct{}

var (
	summonerAllColumns            = []string{"puuid", "game_name", "tag_line", "last_match_update", "last_summoner_update", "id", "account_id", "profile_icon_id", "summoner_level", "revision_date", "player_name"}
	summonerColumnsWithoutDefault = []string{"puuid", "game_name", "tag_line"}
	summonerColumnsWithDefault    = []string{"last_match_update", "last_summoner_update", "id", "account_id", "profile_icon_id", "summoner_level", "revision_date", "player_name"}
	summonerPrimaryKeyColumns     = []string{"puuid"}
	summonerGeneratedColumns      = []string{}
)

type (
	// SummonerSlice is an alias for a slice of pointers to Summoner.
	// This should almost always be used instead of []Summoner.
	SummonerSlice []*Summoner
	// SummonerHook is the signature for custom Summoner hook methods
	SummonerHook func(context.Context, boil.ContextExecutor, *Summoner) error

	summonerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	summonerType                 = reflect.TypeOf(&Summoner{})
	summonerMapping              = queries.MakeStructMapping(summonerType)
	summonerPrimaryKeyMapping, _ = queries.BindMapping(summonerType, summonerMapping, summonerPrimaryKeyColumns)
	summonerInsertCacheMut       sync.RWMutex
	summonerInsertCache          = make(map[string]insertCache)
	summonerUpdateCacheMut       sync.RWMutex
	summonerUpdateCache          = make(map[string]updateCache)
	summonerUpsertCacheMut       sync.RWMutex
	summonerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var summonerAfterSelectMu sync.Mutex
var summonerAfterSelectHooks []SummonerHook

var summonerBeforeInsertMu sync.Mutex
var summonerBeforeInsertHooks []SummonerHook
var summonerAfterInsertMu sync.Mutex
var summonerAfterInsertHooks []SummonerHook

var summonerBeforeUpdateMu sync.Mutex
var summonerBeforeUpdateHooks []SummonerHook
var summonerAfterUpdateMu sync.Mutex
var summonerAfterUpdateHooks []SummonerHook

var summonerBeforeDeleteMu sync.Mutex
var summonerBeforeDeleteHooks []SummonerHook
var summonerAfterDeleteMu sync.Mutex
var summonerAfterDeleteHooks []SummonerHook

var summonerBeforeUpsertMu sync.Mutex
var summonerBeforeUpsertHooks []SummonerHook
var summonerAfterUpsertMu sync.Mutex
var summonerAfterUpsertHooks []SummonerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Summoner) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range summonerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Summoner) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range summonerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Summoner) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range summonerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Summoner) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range summonerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Summoner) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range summonerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Summoner) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range summonerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Summoner) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range summonerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Summoner) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range summonerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Summoner) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range summonerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSummonerHook registers your hook function for all future operations.
func AddSummonerHook(hookPoint boil.HookPoint, summonerHook SummonerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		summonerAfterSelectMu.Lock()
		summonerAfterSelectHooks = append(summonerAfterSelectHooks, summonerHook)
		summonerAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		summonerBeforeInsertMu.Lock()
		summonerBeforeInsertHooks = append(summonerBeforeInsertHooks, summonerHook)
		summonerBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		summonerAfterInsertMu.Lock()
		summonerAfterInsertHooks = append(summonerAfterInsertHooks, summonerHook)
		summonerAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		summonerBeforeUpdateMu.Lock()
		summonerBeforeUpdateHooks = append(summonerBeforeUpdateHooks, summonerHook)
		summonerBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		summonerAfterUpdateMu.Lock()
		summonerAfterUpdateHooks = append(summonerAfterUpdateHooks, summonerHook)
		summonerAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		summonerBeforeDeleteMu.Lock()
		summonerBeforeDeleteHooks = append(summonerBeforeDeleteHooks, summonerHook)
		summonerBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		summonerAfterDeleteMu.Lock()
		summonerAfterDeleteHooks = append(summonerAfterDeleteHooks, summonerHook)
		summonerAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		summonerBeforeUpsertMu.Lock()
		summonerBeforeUpsertHooks = append(summonerBeforeUpsertHooks, summonerHook)
		summonerBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		summonerAfterUpsertMu.Lock()
		summonerAfterUpsertHooks = append(summonerAfterUpsertHooks, summonerHook)
		summonerAfterUpsertMu.Unlock()
	}
}

// One returns a single summoner record from the query.
func (q summonerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Summoner, error) {
	o := &Summoner{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for summoner")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Summoner records from the query.
func (q summonerQuery) All(ctx context.Context, exec boil.ContextExecutor) (SummonerSlice, error) {
	var o []*Summoner

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Summoner slice")
	}

	if len(summonerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Summoner records in the query.
func (q summonerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count summoner rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q summonerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if summoner exists")
	}

	return count > 0, nil
}

// Summoners retrieves all the records using an executor.
func Summoners(mods ...qm.QueryMod) summonerQuery {
	mods = append(mods, qm.From("\"summoner\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"summoner\".*"})
	}

	return summonerQuery{q}
}

// FindSummoner retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSummoner(ctx context.Context, exec boil.ContextExecutor, puuid string, selectCols ...string) (*Summoner, error) {
	summonerObj := &Summoner{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"summoner\" where \"puuid\"=$1", sel,
	)

	q := queries.Raw(query, puuid)

	err := q.Bind(ctx, exec, summonerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from summoner")
	}

	if err = summonerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return summonerObj, err
	}

	return summonerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Summoner) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no summoner provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(summonerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	summonerInsertCacheMut.RLock()
	cache, cached := summonerInsertCache[key]
	summonerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			summonerAllColumns,
			summonerColumnsWithDefault,
			summonerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(summonerType, summonerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(summonerType, summonerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"summoner\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"summoner\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into summoner")
	}

	if !cached {
		summonerInsertCacheMut.Lock()
		summonerInsertCache[key] = cache
		summonerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Summoner.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Summoner) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	summonerUpdateCacheMut.RLock()
	cache, cached := summonerUpdateCache[key]
	summonerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			summonerAllColumns,
			summonerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update summoner, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"summoner\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, summonerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(summonerType, summonerMapping, append(wl, summonerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update summoner row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for summoner")
	}

	if !cached {
		summonerUpdateCacheMut.Lock()
		summonerUpdateCache[key] = cache
		summonerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q summonerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for summoner")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for summoner")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SummonerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), summonerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"summoner\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, summonerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in summoner slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all summoner")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Summoner) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no summoner provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(summonerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	summonerUpsertCacheMut.RLock()
	cache, cached := summonerUpsertCache[key]
	summonerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			summonerAllColumns,
			summonerColumnsWithDefault,
			summonerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			summonerAllColumns,
			summonerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert summoner, could not build update column list")
		}

		ret := strmangle.SetComplement(summonerAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(summonerPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert summoner, could not build conflict column list")
			}

			conflict = make([]string, len(summonerPrimaryKeyColumns))
			copy(conflict, summonerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"summoner\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(summonerType, summonerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(summonerType, summonerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert summoner")
	}

	if !cached {
		summonerUpsertCacheMut.Lock()
		summonerUpsertCache[key] = cache
		summonerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Summoner record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Summoner) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Summoner provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), summonerPrimaryKeyMapping)
	sql := "DELETE FROM \"summoner\" WHERE \"puuid\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from summoner")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for summoner")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q summonerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no summonerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from summoner")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for summoner")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SummonerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(summonerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), summonerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"summoner\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, summonerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from summoner slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for summoner")
	}

	if len(summonerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Summoner) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSummoner(ctx, exec, o.Puuid)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SummonerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SummonerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), summonerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"summoner\".* FROM \"summoner\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, summonerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SummonerSlice")
	}

	*o = slice

	return nil
}

// SummonerExists checks if the Summoner row exists.
func SummonerExists(ctx context.Context, exec boil.ContextExecutor, puuid string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"summoner\" where \"puuid\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, puuid)
	}
	row := exec.QueryRowContext(ctx, sql, puuid)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if summoner exists")
	}

	return exists, nil
}

// Exists checks if the Summoner row exists.
func (o *Summoner) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SummonerExists(ctx, exec, o.Puuid)
}
